// clang-format off
{{!
This template file is licensed under BSD Zero Clause License (0BSD).
For the full text see ./highlevel/LICENSE.txt
}}
{{=/*% %*/=}}
// clang-format on
/**
 * @file
 *
 * This file was automatically generated using `kdb gen highlevel`.
 * Any changes will be overwritten, when the file is regenerated.
 *
 * @copyright BSD Zero Clause License
 *
 *     Copyright (C) 2019 Elektra Initiative (https://libelektra.org)
 *
 *     Permission to use, copy, modify, and/or distribute this software for any
 *     purpose with or without fee is hereby granted.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 *     REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 *     FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 *     INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 *     LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 *     OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *     PERFORMANCE OF THIS SOFTWARE.
 */

#include "/*% header_file %*/"

/*%# more_headers %*/
#include "/*% . %*/"
/*%/ more_headers %*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kdbhelper.h>
#include <kdbinvoke.h>
#include <kdbopts.h>

#include <elektra/conversion.h>

/*%# embed_spec? %*/
static KeySet * embeddedSpec (void)
{
	return /*%& spec %*/;
}
/*%/ embed_spec? %*/

/*%# embed_help_fallback? %*/
static const char * helpFallback = "/*% help_fallback %*/";

static int isHelpMode (void)
{
	ElektraInvokeHandle * gopts = elektraInvokeOpen ("gopts", NULL, NULL);

	typedef int (*func) (void);
	func * goptsIsHelpModePtr = (func *) elektraInvokeGetFunction (gopts, "ishelpmode");
	
	int ret = goptsIsHelpModePtr == NULL ? 0 : (*goptsIsHelpModePtr) ();

	elektraInvokeClose (gopts, NULL);
	return ret == 1;
}
/*%/ embed_help_fallback? %*/

/*%={{ }}=%*/
/**
 * Initializes an instance of Elektra for the application '{{{ parent_key }}}'.
 *
 * This can be invoked as many times as you want, however it is not a cheap operation,
 * so you should try to reuse the Elektra handle as much as possible.
 *
 * @param elektra A reference to where the Elektra instance shall be stored.
 *                Has to be disposed of with elektraClose().
 * @param error   A reference to an ElektraError pointer. Will be passed to elektraOpen().
 *
 * @retval 0  on success, @p elektra will contain a new Elektra instance coming from elektraOpen(),
 *            @p error will be unchanged
 * @retval -1 on error, @p elektra will be unchanged, @p error will be set
 * @retval 1  help mode, '-h' or '--help' was specified call {{{ help_function_name }}} to display
 *            the help message. @p elektra will contain a new Elektra instance. It has to be passed
 *            to {{{ help_function_name }}}. You also need to elektraClose() it.
 *            @p error will be unchanged
 *
 * @see elektraOpen
 */// {{=/*% %*/=}}
int /*%& init_function_name %*/ (Elektra ** elektra, ElektraError ** error)
{
	/*%# spec_as_defaults? %*/
	KeySet * defaults = embeddedSpec ();
	/*%/ spec_as_defaults? %*/
	/*%^ spec_as_defaults? %*/
	/*%# embed_defaults? %*/
	KeySet * defaults = /*%& defaults %*/;
	/*%/ embed_defaults? %*/
	/*%^ embed_defaults? %*/
	KeySet * defaults = NULL;
	/*%/ embed_defaults? %*/
	/*%/ spec_as_defaults? %*/

	KeySet * contract = /*%& contract %*/;

	Elektra * e = elektraOpen ("/*% parent_key %*/", defaults, contract, error);

	if (defaults != NULL)
	{
		ksDel (defaults);
	}

	if (e == NULL)
	{
		*elektra = NULL;
		/*%# embed_help_fallback? %*/
		if (isHelpMode ())
		{
			elektraErrorReset (error);
			return 1;
		}
		/*%/ embed_help_fallback? %*/

		return -1;
	}

	*elektra = e;
	return elektraHelpKey (e) != NULL ? 1 : 0;
}

/**
 * Checks whether specload mode was invoked and if so, sends the specification over stdout
 * in the format expected by specload.
 *
 * You MUST not output anything to stdout before invoking this function. Ideally invoking this
 * is the first thing you do in your main()-function.
 *
 * This function will ONLY RETURN, if specload mode was NOT invoked. Otherwise it will call `exit()`.
 *
 * @param argc pass the value of argc from main
 * @param argv pass the value of argv from main
 */
void /*%& specload_function_name %*/ (int argc, const char ** argv)
{
	/*%# embed_spec? %*/
	if (argc != 2 || strcmp (argv[1], "/*% specload_arg %*/") != 0)
	{
		return;
	}

	KeySet * spec = embeddedSpec ();

	Key * parentKey = keyNew ("/*% spec_parent_key %*/", KEY_META, "system/elektra/quickdump/noparent", "", KEY_END);

	KeySet * specloadConf = ksNew (1, keyNew ("system/sendspec", KEY_END), KS_END);
	ElektraInvokeHandle * specload = elektraInvokeOpen ("specload", specloadConf, parentKey);

	int result = elektraInvoke2Args (specload, "sendspec", spec, parentKey);

	elektraInvokeClose (specload, parentKey);
	keyDel (parentKey);
	ksDel (specloadConf);
	ksDel (spec);

	exit (result == ELEKTRA_PLUGIN_STATUS_SUCCESS ? EXIT_SUCCESS : EXIT_FAILURE);
	/*%/ embed_spec? %*/
}

/*%={{ }}=%*/
/**
 * Outputs the help message to stdout
 *
 * @param elektra  The Elektra instance produced by {{{ init_function_name }}}.
 * @param usage	   If this is not NULL, it will be used instead of the default usage line.
 * @param prefix   If this is not NULL, it will be inserted between the usage line and the options list.
 */// {{=/*% %*/=}}
void /*%& help_function_name %*/ (Elektra * elektra, const char * usage, const char * prefix)
{
	if (elektra == NULL)
	{
		/*%# embed_help_fallback? %*/
		printf ("%s", helpFallback);
		/*%/ embed_help_fallback? %*/
		return;
	}

	Key * helpKey = elektraHelpKey (elektra);
	if (helpKey == NULL)
	{
		return;
	}

	char * help = elektraGetOptsHelpMessage (helpKey, usage, prefix);
	printf ("%s", help);
	elektraFree (help);
}

/*%> partial.enum.c %*/

/*%> partial.union.c %*/

/*%> partial.struct.c %*/
