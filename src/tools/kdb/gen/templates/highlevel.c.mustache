// clang-format off
{{!
This template file is licensed under BSD Zero Clause License (0BSD).
For the full text see ./highlevel/LICENSE.txt
}}
{{=/*% %*/=}}
// clang-format on
/**
 * @file
 *
 * This file was automatically generated using `kdb gen highlevel`.
 * Any changes will be overwritten, when the file is regenerated.
 *
 * @copyright BSD Zero Clause License
 *
 *     Copyright (c) Elektra Initiative (https://www.libelektra.org)
 *
 *     Permission to use, copy, modify, and/or distribute this software for any
 *     purpose with or without fee is hereby granted.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 *     REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 *     FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 *     INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 *     LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 *     OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *     PERFORMANCE OF THIS SOFTWARE.
 */

#include "/*% header_file %*/"

/*%# more_headers %*/
#include "/*% . %*/"
/*%/ more_headers %*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <elektra/kdb/contracts/gopts.h>
#include <elektra/opts.h>
#include <elektra/plugin/invoke.h>
#include <elektra/type/conversion.h>

#include <internal/utility/old_helper.h>

/*%# embed_spec? %*/
static KeySet * embeddedSpec (void)
{
	return /*%& spec %*/;
}
/*%/ embed_spec? %*/

/*%# embed_help_fallback? %*/
static const char * helpFallback = "/*% help_fallback %*/";

/*%# init_with_pointers? %*/
static int isHelpMode (int argc, const char * const * argv)
{
	for (int i = 0; i < argc; ++i)
	{
		if (strcmp (argv[i], "--help") == 0)
		{
			return 1;
		}
	}

	return 0;
}
/*%/ init_with_pointers? %*/
/*%^ init_with_pointers? %*/
static int isHelpMode (size_t argsSize, const char * args)
{
	const char * argPtr = args;

	while (argPtr < args + argsSize)
	{
		if (strcmp (argPtr, "--help") == 0)
		{
			return 1;
		}

		argPtr += strlen (argPtr) + 1;
	}

	return 0;
}
/*%/ init_with_pointers? %*/
/*%/ embed_help_fallback? %*/

/*%={{ }}=%*/
/**
 * Initializes an instance of Elektra for the application '{{{ parent_key }}}'.
 *
 * This can be invoked as many times as you want, however it is not a cheap operation,
 * so you should try to reuse the Elektra handle as much as possible.
 *
 * @param elektra A reference to where the Elektra instance shall be stored.
 *                Has to be disposed of with elektraClose().
 * @param error   A reference to an ElektraError pointer. Will be passed to elektraOpen().
 *
 * @retval 0  on success, @p elektra will contain a new Elektra instance coming from elektraOpen(),
 *            @p error will be unchanged
 * @retval -1 on error, @p elektra will be unchanged, @p error will be set
 * @retval 1  help mode, '--help' was specified call {{{ help_function_name }}} to display
 *            the help message. @p elektra will contain a new Elektra instance. It has to be passed
 *            to {{{ help_function_name }}}. You also need to elektraClose() it.
 *            @p error will be unchanged
 *
 * @see elektraOpen
 */// {{=/*% %*/=}}
int /*%& init_function_name %*/ (Elektra ** elektra, /*%# init_with_pointers? %*/
				 int argc, const char * const * argv, const char * const * envp,
				 /*%/ init_with_pointers? %*/ /*%^ init_with_pointers? %*/
				 size_t argsSize, const char * args, size_t envSize, const char * envs,
				 /*%/ init_with_pointers? %*/
				 ElektraError ** error)
{
	/*%# spec_as_defaults? %*/
	KeySet * defaults = embeddedSpec ();
	/*%/ spec_as_defaults? %*/
	/*%^ spec_as_defaults? %*/
	/*%# embed_defaults? %*/
	KeySet * defaults = /*%& defaults %*/;
	/*%/ embed_defaults? %*/
	/*%^ embed_defaults? %*/
	KeySet * defaults = NULL;
	/*%/ embed_defaults? %*/
	/*%/ spec_as_defaults? %*/

	KeySet * contract = /*%& contract %*/;
	Key * parentKey = keyNew ("/*% parent_key %*/", KEY_END);

	/*%# init_with_pointers? %*/
	elektraGOptsContract (contract, argc, argv, envp, parentKey, NULL);
	/*%/ init_with_pointers? %*/
	/*%^ init_with_pointers? %*/
	elektraGOptsContract (contract, argsSize, args, envSize, env, parentKey, NULL);
	/*%/ init_with_pointers? %*/

	keyDel (parentKey);

	Elektra * e = elektraOpen ("/*% parent_key %*/", defaults, contract, error);

	if (defaults != NULL)
	{
		ksDel (defaults);
	}

	if (contract != NULL)
	{
		ksDel (contract);
	}

	if (e == NULL)
	{
		*elektra = NULL;
		/*%# embed_help_fallback? %*/
		/*%# init_with_pointers? %*/
		if (isHelpMode (argc, argv))
		{
			elektraErrorReset (error);
			return 1;
		}
		/*%/ init_with_pointers? %*/
		/*%^ init_with_pointers? %*/
		if (isHelpMode (argsSize, args))
		{
			elektraErrorReset (error);
			return 1;
		}
		/*%/ init_with_pointers? %*/
		/*%/ embed_help_fallback? %*/

		return -1;
	}

	*elektra = e;
	return elektraHelpKey (e) != NULL && strcmp (keyString (elektraHelpKey (e)), "1") == 0 ? 1 : 0;
}

/**
 * Checks whether specload mode was invoked and if so, sends the specification over stdout
 * in the format expected by specload.
 *
 * You MUST not output anything to stdout before invoking this function. Ideally invoking this
 * is the first thing you do in your main()-function.
 *
 * This function will ONLY RETURN, if specload mode was NOT invoked. Otherwise it will call `exit()`.
 *
 * @param argc pass the value of argc from main
 * @param argv pass the value of argv from main
 */
void /*%& specload_function_name %*/ (int argc, const char * const * argv)
{
	/*%# embed_spec? %*/
	if (argc != 2 || strcmp (argv[1], "/*% specload_arg %*/") != 0)
	{
		return;
	}

	KeySet * spec = embeddedSpec ();

	Key * parentKey = keyNew ("/*% spec_parent_key %*/", KEY_META, "system:/elektra/quickdump/noparent", "", KEY_END);

	KeySet * specloadConf = ksNew (1, keyNew ("system:/sendspec", KEY_END), KS_END);
	ElektraInvokeHandle * specload = elektraInvokeOpen ("specload", specloadConf, parentKey);

	int result = elektraInvoke2Args (specload, "sendspec", spec, parentKey);

	elektraInvokeClose (specload, parentKey);
	keyDel (parentKey);
	ksDel (specloadConf);
	ksDel (spec);

	exit (result == ELEKTRA_PLUGIN_STATUS_SUCCESS ? EXIT_SUCCESS : EXIT_FAILURE);
	/*%/ embed_spec? %*/
}

/*%={{ }}=%*/
/**
 * Outputs the help message to stdout
 *
 * @param elektra  The Elektra instance produced by {{{ init_function_name }}}.
 * @param usage	   If this is not NULL, it will be used instead of the default usage line.
 * @param prefix   If this is not NULL, it will be inserted between the usage line and the options list.
 */// {{=/*% %*/=}}
void /*%& help_function_name %*/ (Elektra * elektra, const char * usage, const char * prefix)
{
	if (elektra == NULL)
	{
		/*%# embed_help_fallback? %*/
		printf ("%s", helpFallback);
		/*%/ embed_help_fallback? %*/
		return;
	}

	Key * helpKey = elektraHelpKey (elektra);
	if (helpKey == NULL)
	{
		return;
	}

	char * help = elektraGetOptsHelpMessage (helpKey, usage, prefix);
	printf ("%s", help);
	elektraFree (help);
}

/*%# use_commands? %*/
/*%={{ }}=%*/
/**
 * Determines which sub-commands (according to `elektraGetOpts`) have been invoked and calls the associated functions in
 * order. The parameters @p elektra and @p userData will be passed through. In addition, the `terminal` parameter will be
 * set to `true` for the last command function that is called.
 *
 * @param elektra  The Elektra instance produced by {{{ init_function_name }}}.
 * @param usage	   Custom applicationd defined data. Will be passed untouched to the invoked command functions. Maybe NULL.
 *
 * @return If @p elektra is NULL -1 is returned.
 *         If one of the invoked command functions returns a non-zero value, that value is returned.
 *         Otherwise the return value of the terminal command function is returned.
 */// {{=/*% %*/=}}
int /*%& run_commands_function_name %*/ (Elektra * elektra, void * userData)
{
	if (elektra == NULL)
	{
		return -1;
	}

	KeySet * commands = ksNew (/*%& commands_count %*/,
				   /*%# commands %*/
				   keyNew ("//*% name %*/", KEY_FUNC, /*%& function_name %*/, KEY_END),
				   /*%/ commands %*/
				   KS_END);

	typedef int (*commandFunction) (Elektra *, kdb_boolean_t, void *);

	Key * lastCommand = keyNew ("/", KEY_END);
	const char * command = ELEKTRA_GET (String) (elektra, keyName (lastCommand) + 1);
	while (strlen (command) > 0)
	{
		Key * commandKey = ksLookup (commands, lastCommand, 0);
		const void * rawFunc = keyValue (commandKey);
		commandFunction func = *(commandFunction *) rawFunc;
		int result = func (elektra, false, userData);
		if (result != 0)
		{
			keyDel (lastCommand);
			ksDel (commands);
			return result;
		}

		keyAddBaseName (lastCommand, command);
		command = ELEKTRA_GET (String) (elektra, keyName (lastCommand) + 1);
	}

	Key * commandKey = ksLookup (commands, lastCommand, 0);
	const void * rawFunc = keyValue (commandKey);
	commandFunction func = *(commandFunction *) rawFunc;
	int result = func (elektra, true, userData);

	keyDel (lastCommand);
	ksDel (commands);
	return result;
}
/*%/ use_commands? %*/

/*%> partial.enum.c %*/

/*%> partial.union.c %*/

/*%> partial.struct.c %*/
