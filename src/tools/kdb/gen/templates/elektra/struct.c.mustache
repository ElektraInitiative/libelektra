// clang-format off
{{=/*% %*/=}}
// clang-format on

// -------------------------
// Struct accessor functions
// -------------------------

/*%# structs %*/
/*%# alloc? %*/
ELEKTRA_STRUCT_FREE_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/)
{
	if (*ptr == NULL)
	{
		return;
	}

	/*%# fields %*/
	/*%^ is_discriminator? %*/
	/*%# is_union? %*/
	/*%# is_array? %*/
	for (kdb_long_long_t i = 0; i < (*ptr)->/*%& size_field %*/; ++i)
	{
		ELEKTRA_UNION_FREE (/*%& type_name %*/) (&(*ptr)->/*%& name %*/[i], ((*ptr)->/*%& discr_field %*/[i]));
	}
	/*%/ is_array? %*/
	elektraFree ((*ptr)->/*%& name %*/);
	elektraFree ((*ptr)->/*%& discr_field %*/);
	/*%^ is_array? %*/
	ELEKTRA_UNION_FREE (/*%& type_name %*/) ((*ptr)->/*%& name %*/, (*ptr)->/*%& discr_field %*/);
	/*%/ is_array? %*/
	/*%/ is_union? %*/
	/*%^ is_union? %*/
	/*%# is_struct %*/
	/*%# is_array? %*/
	for (kdb_long_long_t i = 0; i < (*ptr)->/*%& size_field %*/; ++i)
	{
		ELEKTRA_STRUCT_FREE (/*%& type_name %*/) (&(*ptr)->/*%& name %*/[i]);
	}
	elektraFree ((*ptr)->/*%& name %*/);
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	ELEKTRA_STRUCT_FREE (/*%& type_name %*/) ((*ptr)->/*%& name %*/);
	/*%/ is_array? %*/
	/*%/ is_struct %*/
	/*%/ is_union? %*/
	/*%/ is_discriminator? %*/
	/*%/ fields %*/
	elektraFree (*ptr);
	*ptr = NULL;
}

ELEKTRA_GET_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/)
{
	/*%& native_type %*/ *result = elektraCalloc (sizeof (/*%& native_type %*/));
	size_t nameLen = strlen (keyname);
	char * field = elektraCalloc ((nameLen + 1 + /*%& max_field_len %*/ +1) * sizeof (char));
	strcpy (field, keyname);
	field[nameLen] = '/';
	++nameLen;

	/*%> partial.struct.alloc.fields.c %*/

	elektraFree (field);
	return result;
}

ELEKTRA_GET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/)
{
	/*%& native_type %*/ *result = elektraCalloc (sizeof (/*%& native_type %*/));
	size_t nameLen = strlen (keyname);
	char * field = elektraCalloc ((nameLen + 1 + /*%& max_field_len %*/ +1 + ELEKTRA_MAX_ARRAY_SIZE) * sizeof (char));
	strcpy (field, keyname);
	field[nameLen] = '/';
	++nameLen;

	elektraWriteArrayNumber (&field[nameLen], index);
	nameLen = strlen (field);
	field[nameLen] = '/';
	++nameLen;

	/*%> partial.struct.alloc.fields.c %*/

	elektraFree (field);
	return result;
}
/*%/ alloc? %*/
/*%^ alloc? %*/
ELEKTRA_GET_OUT_PTR_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/)
{
	size_t nameLen = strlen (keyname);
	char * field = elektraCalloc ((nameLen + 1 + /*%& max_field_len %*/ +1) * sizeof (char));
	strcpy (field, keyname);
	field[nameLen] = '/';
	++nameLen;

	/*%# fields %*/
	/*%^ is_array_size? %*/
	strncpy (&field[nameLen], "/*% key_name %*/", /*%& max_field_len %*/);
	/*%# is_struct? %*/
/*%! should never happend %*/
#error "struct reference inside non-allocating struct is not supported"
	/*%/ is_struct? %*/
	/*%^ is_struct? %*/
	/*%# is_array? %*/
/*%! should never happend %*/
#error "array inside non-allocating struct is not supported"
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	result->/*%& name %*/ = ELEKTRA_GET (/*%& type_name %*/) (elektra, field);
	/*%/ is_array? %*/
	/*%/ is_struct? %*/
	/*%/ is_array_size? %*/

	/*%/ fields %*/
	elektraFree (field);
}

ELEKTRA_GET_OUT_PTR_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/)
{
	size_t nameLen = strlen (keyname);
	char * field = elektraCalloc ((nameLen + 1 + /*%& max_field_len %*/ +1 + ELEKTRA_MAX_ARRAY_SIZE) * sizeof (char));
	strcpy (field, keyname);
	field[nameLen] = '/';
	++nameLen;

	elektraWriteArrayNumber (&field[nameLen], index);
	nameLen = strlen (field);
	field[nameLen] = '/';
	++nameLen;

	/*%# fields %*/
	/*%^ is_array_size? %*/
	strncpy (&field[nameLen], "/*% key_name %*/", /*%& max_field_len %*/);
	/*%# is_struct? %*/
/*%! should never happend %*/
#error "struct reference inside non-allocating struct is not supported"
	/*%/ is_struct? %*/
	/*%^ is_struct? %*/
	/*%# is_array? %*/
/*%! should never happend %*/
#error "array inside non-allocating struct is not supported"
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	result->/*%& name %*/ = ELEKTRA_GET (/*%& type_name %*/) (elektra, field);
	/*%/ is_array? %*/
	/*%/ is_struct? %*/
	/*%/ is_array_size? %*/

	/*%/ fields %*/
	elektraFree (field);
}
/*%/ alloc? %*/

ELEKTRA_SET_SIGNATURE (const /*%& native_type %*/ *, /*%& type_name %*/)
{
	size_t nameLen = strlen (keyname);
	char * field = elektraCalloc ((nameLen + 1 + /*%& max_field_len %*/ +1) * sizeof (char));
	strcpy (field, keyname);
	field[nameLen] = '/';
	++nameLen;

	/*%# fields %*/
	/*%^ is_array_size? %*/
	/*%^ is_discriminator? %*/
	strncpy (&field[nameLen], "/*% key_name %*/", /*%& max_field_len %*/);
	/*%# is_union? %*/
	/*%# is_array? %*/
	for (kdb_long_long_t i = 0; i < value->/*%& size_field %*/; ++i)
	{
		/*%& native_type %*/ v = value->/*%& name %*/[i];
		ELEKTRA_SET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, field, i, v, (value->/*%& discr_field %*/[i]), error);
	}
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	ELEKTRA_SET (/*%& type_name %*/) (elektra, field, value->/*%& name %*/, value->/*%& discr_field %*/, error);
	/*%/ is_array? %*/
	/*%/ is_union? %*/
	/*%^ is_union? %*/
	/*%# is_array? %*/
	for (kdb_long_long_t i = 0; i < value->/*%& size_field %*/; ++i)
	{
		ELEKTRA_SET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, field, i, value->/*%& name %*/[i], error);
	}
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	ELEKTRA_SET (/*%& type_name %*/) (elektra, field, value->/*%& name %*/, error);
	/*%/ is_array? %*/
	/*%/ is_union? %*/
	if (error != NULL)
	{
		return;
	}
	/*%/ is_discriminator? %*/
	/*%/ is_array_size? %*/

	/*%/ fields %*/
}

ELEKTRA_SET_ARRAY_ELEMENT_SIGNATURE (const /*%& native_type %*/ *, /*%& type_name %*/)
{
	size_t nameLen = strlen (keyname);
	char * field = elektraCalloc ((nameLen + 1 + /*%& max_field_len %*/ +1 + ELEKTRA_MAX_ARRAY_SIZE) * sizeof (char));
	strcpy (field, keyname);
	field[nameLen] = '/';
	++nameLen;

	elektraWriteArrayNumber (&field[nameLen], index);
	nameLen = strlen (field);
	field[nameLen] = '/';
	++nameLen;

	/*%# fields %*/
	/*%^ is_array_size? %*/
	/*%^ is_discriminator? %*/
	strncpy (&field[nameLen], "/*% key_name %*/", /*%& max_field_len %*/);
	/*%# is_union? %*/
	/*%# is_array? %*/
	for (kdb_long_long_t i = 0; i < value->/*%& size_field %*/; ++i)
	{
		/*%& native_type %*/ v = value->/*%& name %*/[i];
		ELEKTRA_SET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, field, i, v, (value->/*%& discr_field %*/[i]), error);
	}
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	ELEKTRA_SET (/*%& type_name %*/) (elektra, field, value->/*%& name %*/, value->/*%& discr_field %*/, error);
	/*%/ is_array? %*/
	/*%/ is_union? %*/
	/*%^ is_union? %*/
	/*%# is_array? %*/
	for (kdb_long_long_t i = 0; i < value->/*%& size_field %*/; ++i)
	{
		ELEKTRA_SET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, field, i, value->/*%& name %*/[i], error);
	}
	/*%/ is_array? %*/
	/*%^ is_array? %*/
	ELEKTRA_SET (/*%& type_name %*/) (elektra, field, value->/*%& name %*/, error);
	/*%/ is_array? %*/
	/*%/ is_union? %*/
	if (error != NULL)
	{
		return;
	}
	/*%/ is_discriminator? %*/
	/*%/ is_array_size? %*/

	/*%/ fields %*/
}
/*%/ structs %*/
