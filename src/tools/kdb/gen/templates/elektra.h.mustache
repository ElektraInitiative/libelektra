/**
 * @file
 *
 * @brief
 *
 * @copyright BSD License (see doc/LICENSE.md or https://www.libelektra.org)
 */

// clang-format off
{{=/*% %*/=}}
// clang-format on

#ifndef /*%& include_guard %*/
#define /*%& include_guard %*/

#include <elektra.h>

/*%# more_headers %*/
#include "/*% . %*/"
/*%/ more_headers %*/

/*%# enums %*/
/*%# generate_typedef? %*/
typedef enum
{
	/*%# values %*/
	/*%& name %*/ = /*%& value %*/,
	/*%/ values %*/
} /*%& native_type %*/;

/*%/ generate_typedef? %*/
/*%/ enums %*/

/*%# enums %*/
/*%# generate_typedef? %*/
ELEKTRA_KEY_TO_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_TO_STRING_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
/*%/ generate_typedef? %*/

ELEKTRA_GET_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_GET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_SET_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_SET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);

/*%/ enums %*/

/*%# generate_structs? %*/
#define ELEKTRA_STRUCT_FREE(cType, typeName) elektraFree##typeName
#define ELEKTRA_STRUCT_FREE_SIGNATURE(cType, typeName) void ELEKTRA_STRUCT_FREE (cType, typeName) (cType * ptr)
/*%# structs %*/
/*%# generate_typedef? %*/
typedef struct
{
	/*%# fields %*/
	/*%& native_type %*/ /*%& name %*/;
	/*%/ fields %*/
} /*%& native_type %*/;

/*%/ generate_typedef? %*/
/*%/ structs %*/

/*%# structs %*/
/*%# alloc? %*/
ELEKTRA_STRUCT_FREE_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/);

ELEKTRA_GET_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/);
ELEKTRA_GET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/);
/*%/ alloc? %*/
/*%^ alloc? %*/
ELEKTRA_GET_OUT_PTR_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_GET_OUT_PTR_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
/*%/ alloc? %*/
ELEKTRA_SET_SIGNATURE (const /*%& native_type %*/ *, /*%& type_name %*/);
ELEKTRA_SET_ARRAY_ELEMENT_SIGNATURE (const /*%& native_type %*/ *, /*%& type_name %*/);

/*%/ structs %*/
/*%/ generate_structs? %*/

// clang-format off
/*%# keys %*/
#define ELEKTRA_TAG_/*%& tag_name %*/ /*%& tag_name %*/
/*%/ keys %*/
// clang-format on

/*%# keys %*/
/*%# is_struct? %*/
/*%# alloc? %*/
/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 *
 * @return the value of '{{{ name }}}'.
 */// {{=/*% %*/=}}
static inline /*%& native_type %*/ * ELEKTRA_GET (/*%& tag_name %*/) (Elektra * elektra)
{
	return ELEKTRA_GET (/*%& type_name %*/) (elektra, "/*% name %*/");
}

/*%={{ }}=%*/
/**
 * Get element from array '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param index   The array elements index.
 *
 * @return element @p index from array '{{{ name }}}'.
 */// {{=/*% %*/=}}
static inline /*%& native_type %*/ * ELEKTRA_GET_ARRAY_ELEMENT (/*%& tag_name %*/) (Elektra * elektra, kdb_long_long_t index)
{
	return ELEKTRA_GET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, "/*% name %*/", index);
}
/*%/ alloc? %*/
/*%^ alloc? %*/
/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param result  The value will be stored in the referenced variable.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_GET_OUT_PTR (/*%& tag_name %*/) (Elektra * elektra, /*%& native_type %*/ *result)
{
	ELEKTRA_GET (/*%& type_name %*/) (elektra, "/*% name %*/", result);
}

/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param index   The array elements index.
 * @param result  The value will be stored in the referenced variable.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_GET_OUT_PTR_ARRAY_ELEMENT (/*%& tag_name %*/) (Elektra * elektra, kdb_long_long_t index,
									  /*%& native_type %*/ *result)
{
	ELEKTRA_GET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, "/*% name %*/", index, result);
}
/*%/ alloc? %*/

/*%={{ }}=%*/
/**
 * Set the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param value   The value of '{{{ name }}}'.
 * @param error   Pass a reference to an ElektraError pointer.
 *                Will only be set in case of an error.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_SET (/*%& tag_name %*/) (Elektra * elektra, const /*%& native_type %*/ * value, ElektraError ** error)
{
	ELEKTRA_SET (/*%& type_name %*/) (elektra, "/*% name %*/", value, error);
}

/*%={{ }}=%*/
/**
 * Set element of array '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param index   The array elements index.
 * @param value   The value of '{{{ name }}}'.
 * @param error   Pass a reference to an ElektraError pointer.
 *                Will only be set in case of an error.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_SET_ARRAY_ELEMENT (/*%& tag_name %*/) (Elektra * elektra, kdb_long_long_t index,
								  const /*%& native_type %*/ * value, ElektraError ** error)
{
	ELEKTRA_SET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, "/*% name %*/", index, value, error);
}
/*%/ is_struct? %*/
/*%^ is_struct? %*/
/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 *
 * @return the value of '{{{ name }}}'.
 */// {{=/*% %*/=}}
static inline /*%& native_type %*/ ELEKTRA_GET (/*%& tag_name %*/) (Elektra * elektra)
{
	return ELEKTRA_GET (/*%& type_name %*/) (elektra, "/*% name %*/");
}

/*%={{ }}=%*/
/**
 * Get element from array '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param index   The array elements index.
 *
 * @return element @p index from array '{{{ name }}}'.
 */// {{=/*% %*/=}}
static inline /*%& native_type %*/ ELEKTRA_GET_ARRAY_ELEMENT (/*%& tag_name %*/) (Elektra * elektra, kdb_long_long_t index)
{
	return ELEKTRA_GET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, "/*% name %*/", index);
}

/*%={{ }}=%*/
/**
 * Set the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param value   The value of '{{{ name }}}'.
 * @param error   Pass a reference to an ElektraError pointer.
 *                Will only be set in case of an error.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_SET (/*%& tag_name %*/) (Elektra * elektra, /*%& native_type %*/ value, ElektraError ** error)
{
	ELEKTRA_SET (/*%& type_name %*/) (elektra, "/*% name %*/", value, error);
}

/*%={{ }}=%*/
/**
 * Set element of array '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param index   The array elements index.
 * @param value   The value of '{{{ name }}}'.
 * @param error   Pass a reference to an ElektraError pointer.
 *                Will only be set in case of an error.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_SET_ARRAY_ELEMENT (/*%& tag_name %*/) (Elektra * elektra, kdb_long_long_t index, /*%& native_type %*/ value,
								  ElektraError ** error)
{
	ELEKTRA_SET_ARRAY_ELEMENT (/*%& type_name %*/) (elektra, "/*% name %*/", index, value, error);
}
/*%/ is_struct? %*/
/*%/ keys %*/

Elektra * /*%& init_function_name %*/ (ElektraError ** error);

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag The tag to look up.
 * @return The value stored at the given key and index.
 */
#define elektraGet(elektra, tag) ELEKTRA_GET (tag) (elektra)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag The tag to look up.
 * @param result Points to the struct into which results will be stored.
 */
#define elektraGet2(elektra, tag, result) ELEKTRA_GET (tag) (elektra, result)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag The tag to look up.
 * @param index The array index of the desired element, starting with 0.
 * @return The value stored at the given key and index.
 */
#define elektraGetArrayElement(elektra, tag, index) ELEKTRA_GET_ARRAY_ELEMENT (tag) (elektra, index)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag The tag to look up.
 * @param index The array index of the desired element, starting with 0.
 * @param result Points to the struct into which results will be stored.
 */
#define elektraGetArrayElement2(elektra, tag, index, result) ELEKTRA_GET_ARRAY_ELEMENT (tag) (elektra, index, result)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag The codegenerated Tag to write to.
 * @param value The new value.
 * @param error Pass a reference to an ElektraError pointer.
 */
#define elektraSet(elektra, tag, value, error) ELEKTRA_GET (tag) (elektra, value, error)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag The code-generated tag to write to.
 * @param value The new value.
 * @param error Pass a reference to an ElektraError pointer.
 * @param ... Strings to replace dynamic parts (_, #) of keyname.
 */
#define elektraSetArrayElement(elektra, tag, index, value, error) ELEKTRA_SET_ARRAY_ELEMENT (tag) (elektra, index, value, error)

#endif // /*%& include_guard %*/
