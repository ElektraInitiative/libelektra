/**
 * @file
 *
 * @brief
 *
 * @copyright BSD License (see doc/LICENSE.md or https://www.libelektra.org)
 */

// clang-format off
{{=/*% %*/=}}
// clang-format on

#ifndef /*%& include_guard %*/
#define /*%& include_guard %*/

#include <elektra.h>

#include <kdbhelper.h>

/*%# more_headers %*/
#include "/*% . %*/"
/*%/ more_headers %*/

/*%# enums %*/
/*%# generate_typedef? %*/
typedef enum
{
	/*%# values %*/
	/*%& name %*/ = /*%& value %*/,
	/*%/ values %*/
} /*%& native_type %*/;

/*%/ generate_typedef? %*/
/*%/ enums %*/

/*%# enums %*/
/*%# generate_typedef? %*/
ELEKTRA_KEY_TO_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_TO_STRING_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
/*%/ generate_typedef? %*/

ELEKTRA_GET_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_GET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_SET_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_SET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);

/*%/ enums %*/

/*%# generate_structs? %*/
#define ELEKTRA_STRUCT_FREE(cType, typeName) elektraFree##typeName
#define ELEKTRA_STRUCT_FREE_SIGNATURE(cType, typeName) void ELEKTRA_STRUCT_FREE (cType, typeName) (cType * ptr)
/*%# structs %*/
/*%# generate_typedef? %*/
typedef struct
{
	/*%# fields %*/
	/*%& native_type %*/ /*%& name %*/;
	/*%/ fields %*/
} /*%& native_type %*/;

/*%/ generate_typedef? %*/
/*%/ structs %*/

/*%# structs %*/
/*%# alloc? %*/
ELEKTRA_STRUCT_FREE_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/);

ELEKTRA_GET_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/);
ELEKTRA_GET_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/ *, /*%& type_name %*/);
/*%/ alloc? %*/
/*%^ alloc? %*/
ELEKTRA_GET_OUT_PTR_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
ELEKTRA_GET_OUT_PTR_ARRAY_ELEMENT_SIGNATURE (/*%& native_type %*/, /*%& type_name %*/);
/*%/ alloc? %*/
ELEKTRA_SET_SIGNATURE (const /*%& native_type %*/ *, /*%& type_name %*/);
ELEKTRA_SET_ARRAY_ELEMENT_SIGNATURE (const /*%& native_type %*/ *, /*%& type_name %*/);

/*%/ structs %*/
/*%/ generate_structs? %*/

// clang-format off
/*%# keys %*/
/*%={{ }}=%*/
/**
 * Tag name for '{{{ name }}}'
 * {{# args? }}
 * Required arguments:
 * {{# args }}
 * - {{{ native_type }}} {{{ name }}}: {{{ description }}}
 * {{/ args }}
 * {{/ args? }}
 */// {{=/*% %*/=}}
#define ELEKTRA_TAG_/*%& macro_name %*/ /*%& tag_name %*/
/*%/ keys %*/
// clang-format on

// local helper macros to determine the length of a 64 bit integer
#define elektra_len19(x) ((x) < 10000000000000000000ULL ? 19 : 20)
#define elektra_len18(x) ((x) < 1000000000000000000ULL ? 18 : elektra_len19 (x))
#define elektra_len17(x) ((x) < 100000000000000000ULL ? 17 : elektra_len18 (x))
#define elektra_len16(x) ((x) < 10000000000000000ULL ? 16 : elektra_len17 (x))
#define elektra_len15(x) ((x) < 1000000000000000ULL ? 15 : elektra_len16 (x))
#define elektra_len14(x) ((x) < 100000000000000ULL ? 14 : elektra_len15 (x))
#define elektra_len13(x) ((x) < 10000000000000ULL ? 13 : elektra_len14 (x))
#define elektra_len12(x) ((x) < 1000000000000ULL ? 12 : elektra_len13 (x))
#define elektra_len11(x) ((x) < 100000000000ULL ? 11 : elektra_len12 (x))
#define elektra_len10(x) ((x) < 10000000000ULL ? 10 : elektra_len11 (x))
#define elektra_len09(x) ((x) < 1000000000ULL ? 9 : elektra_len10 (x))
#define elektra_len08(x) ((x) < 100000000ULL ? 8 : elektra_len09 (x))
#define elektra_len07(x) ((x) < 10000000ULL ? 7 : elektra_len08 (x))
#define elektra_len06(x) ((x) < 1000000ULL ? 6 : elektra_len07 (x))
#define elektra_len05(x) ((x) < 100000ULL ? 5 : elektra_len06 (x))
#define elektra_len04(x) ((x) < 10000ULL ? 4 : elektra_len05 (x))
#define elektra_len03(x) ((x) < 1000ULL ? 3 : elektra_len04 (x))
#define elektra_len02(x) ((x) < 100ULL ? 2 : elektra_len03 (x))
#define elektra_len01(x) ((x) < 10ULL ? 1 : elektra_len02 (x))
#define elektra_len00(x) ((x) < 0ULL ? 0 : elektra_len01 (x))
#define elektra_len(x) elektra_len00 (x)

/*%# keys %*/
/*%# is_struct? %*/
/*%# alloc? %*/
/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 *
 * @return the value of '{{{ name }}}'.
 */// {{=/*% %*/=}}
static inline /*%& native_type %*/ * ELEKTRA_GET (/*%& tag_name %*/) (Elektra * elektra /*%# args? %*/,
								      /*%# args %*/
								      /*%& native_type %*/ /*%& name %*/ /*%^ last? %*/, /*%/ last? %*/
								      /*%/ args %*/ /*%/ args? %*/)
{
	/*%# args? %*/
	char * name = elektraFormat ("/*% fmt_string %*/", /*%# args %*/ /*%# index? %*/ elektra_len (/*%& name %*/),
				     elektra_len (/*%& name %*/), "#___________________", /*%/ index? %*/ /*%& name %*/ /*%^ last? %*/,
				     /*%/ last? %*/ /*%/ args %*/);
	/*%& native_type %*/ *result = ELEKTRA_GET (/*%& type_name %*/) (elektra, name);
	elektraFree (name);
	return result;
	/*%/ args? %*/
	/*%^ args? %*/
	return ELEKTRA_GET (/*%& type_name %*/) (elektra, "/*% name %*/");
	/*%/ args? %*/
}
/*%/ alloc? %*/
/*%^ alloc? %*/
/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param result  The value will be stored in the referenced variable.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_GET (/*%& tag_name %*/) (Elektra * elektra, /*%& native_type %*/ *result /*%# args? %*/,
						    /*%# args %*/
						    /*%& native_type %*/ /*%& name %*/ /*%^ last? %*/, /*%/ last? %*/
						    /*%/ args %*/ /*%/ args? %*/)
{
	/*%# args? %*/
	char * name = elektraFormat ("/*% fmt_string %*/", /*%# args %*/ /*%# index? %*/ elektra_len (/*%& name %*/),
				     elektra_len (/*%& name %*/), "#___________________", /*%/ index? %*/ /*%& name %*/ /*%^ last? %*/,
				     /*%/ last? %*/ /*%/ args %*/);
	ELEKTRA_GET (/*%& type_name %*/) (elektra, name, result);
	elektraFree (name);
	/*%/ args? %*/
	/*%^ args? %*/
	ELEKTRA_GET (/*%& type_name %*/) (elektra, "/*% name %*/", result);
	/*%/ args? %*/
}
/*%/ alloc? %*/

/*%={{ }}=%*/
/**
 * Set the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param value   The value of '{{{ name }}}'.
 * @param error   Pass a reference to an ElektraError pointer.
 *                Will only be set in case of an error.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_SET (/*%& tag_name %*/) (Elektra * elektra, const /*%& native_type %*/ * value, /*%# args? %*/ /*%# args %*/
						    /*%& native_type %*/ /*%& name %*/,
						    /*%/ args %*/ /*%/ args? %*/ ElektraError ** error)
{
	/*%# args? %*/
	char * name = elektraFormat ("/*% fmt_string %*/", /*%# args %*/ /*%# index? %*/ elektra_len (/*%& name %*/),
				     elektra_len (/*%& name %*/), "#___________________", /*%/ index? %*/ /*%& name %*/ /*%^ last? %*/,
				     /*%/ last? %*/ /*%/ args %*/);
	ELEKTRA_SET (/*%& type_name %*/) (elektra, name, value, error);
	elektraFree (name);
	/*%/ args? %*/
	/*%^ args? %*/
	ELEKTRA_SET (/*%& type_name %*/) (elektra, "/*% name %*/", value, error);
	/*%/ args? %*/
}
/*%/ is_struct? %*/
/*%^ is_struct? %*/
/*%={{ }}=%*/
/**
 * Get the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 *
 * @return the value of '{{{ name }}}'.
 */// {{=/*% %*/=}}
static inline /*%& native_type %*/ ELEKTRA_GET (/*%& tag_name %*/) (Elektra * elektra /*%# args? %*/,
								    /*%# args %*/
								    /*%& native_type %*/ /*%& name %*/ /*%^ last? %*/, /*%/ last? %*/
								    /*%/ args %*/ /*%/ args? %*/)
{
	/*%# args? %*/
	char * name = elektraFormat ("/*% fmt_string %*/", /*%# args %*/ /*%# index? %*/ elektra_len (/*%& name %*/),
				     elektra_len (/*%& name %*/), "#___________________", /*%/ index? %*/ /*%& name %*/ /*%^ last? %*/,
				     /*%/ last? %*/ /*%/ args %*/);
	/*%& native_type %*/ result = ELEKTRA_GET (/*%& type_name %*/) (elektra, name);
	elektraFree (name);
	return result;
	/*%/ args? %*/
	/*%^ args? %*/
	return ELEKTRA_GET (/*%& type_name %*/) (elektra, "/*% name %*/");
	/*%/ args? %*/
}

/*%={{ }}=%*/
/**
 * Set the value of '{{{ name }}}'.
 *
 * @param elektra Instance of Elektra. Create with {{{ init_function_name }}}().
 * @param value   The value of '{{{ name }}}'.
 * @param error   Pass a reference to an ElektraError pointer.
 *                Will only be set in case of an error.
 */// {{=/*% %*/=}}
static inline void ELEKTRA_SET (/*%& tag_name %*/) (Elektra * elektra, /*%& native_type %*/ value, /*%# args? %*/ /*%# args %*/
						    /*%& native_type %*/ /*%& name %*/,
						    /*%/ args %*/ /*%/ args? %*/ ElektraError ** error)
{
	/*%# args? %*/
	char * name = elektraFormat ("/*% fmt_string %*/", /*%# args %*/ /*%# index? %*/ elektra_len (/*%& name %*/),
				     elektra_len (/*%& name %*/), "#___________________", /*%/ index? %*/ /*%& name %*/ /*%^ last? %*/,
				     /*%/ last? %*/ /*%/ args %*/);
	ELEKTRA_SET (/*%& type_name %*/) (elektra, name, value, error);
	elektraFree (name);
	/*%/ args? %*/
	/*%^ args? %*/
	ELEKTRA_SET (/*%& type_name %*/) (elektra, "/*% name %*/", value, error);
	/*%/ args? %*/
}
/*%/ is_struct? %*/
/*%/ keys %*/

#undef elektra_len19
#undef elektra_len18
#undef elektra_len17
#undef elektra_len16
#undef elektra_len15
#undef elektra_len14
#undef elektra_len13
#undef elektra_len12
#undef elektra_len11
#undef elektra_len10
#undef elektra_len09
#undef elektra_len08
#undef elektra_len07
#undef elektra_len06
#undef elektra_len05
#undef elektra_len04
#undef elektra_len03
#undef elektra_len02
#undef elektra_len01
#undef elektra_len00
#undef elektra_len

Elektra * /*%& init_function_name %*/ (ElektraError ** error);

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag     The tag to look up.
 *
 * @return The value stored at the given key and index.
 */
#define elektraGet(elektra, tag) ELEKTRA_GET (tag) (elektra)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag     The tag to look up.
 * @param ...     Variable arguments depending on the given tag.
 *
 * @return The value stored at the given key and index.
 */
#define elektraGetV(elektra, tag, ...) ELEKTRA_GET (tag) (elektra, __VA_ARGS__)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag     The tag to look up.
 * @param result  Points to the struct into which results will be stored.
 */
#define elektraGet2(elektra, result, tag) ELEKTRA_GET (tag) (elektra, result)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param result  Points to the struct into which results will be stored.
 * @param tag     The tag to look up.
 * @param ...     Variable arguments depending on the given tag.
 */
#define elektraGet2V(elektra, result, tag, ...) ELEKTRA_GET (tag) (elektra, result, __VA_ARGS__)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag     The codegenerated Tag to write to.
 * @param value   The new value.
 * @param error   Pass a reference to an ElektraError pointer.
 */
#define elektraSet(elektra, tag, value, error) ELEKTRA_GET (tag) (elektra, value, error)

/**
 * @param elektra The elektra instance initialized with the parent key.
 * @param tag     The codegenerated Tag to write to.
 * @param value   The new value.
 * @param error   Pass a reference to an ElektraError pointer.
 * @param ...     Variable arguments depending on the given tag.
 */
#define elektraSetV(elektra, tag, value, error, ...) ELEKTRA_GET (tag) (elektra, value, __VA_ARGS__, error)

#endif // /*%& include_guard %*/
