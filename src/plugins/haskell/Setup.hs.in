--
-- Collects information about the libraries used to build this plugin
-- so they can be statically linked afterwards in order to provide
-- easy-to-package haskell plugins for elektra 
--
-- Furthermore it works around the issue that extra-include-dirs doesn't
-- work properly on old cabal version
--
{-# LANGUAGE CPP #-}

module Main (main) where

import Control.Monad        (mapM_, when, filterM, sequence, unless)
import Control.Applicative  (liftA2)
import Data.Foldable        (toList, traverse_)
import Data.Maybe           (mapMaybe)
import Data.Set             (Set)
import Data.List            (isInfixOf, intercalate, nub)
import System.IO            (hPutStrLn, stderr)
import System.Exit          (exitFailure)
import System.Process       (readProcess)
import System.Directory     (createDirectoryIfMissing, doesFileExist)

import Distribution.Simple
import Distribution.InstalledPackageInfo (InstalledPackageInfo)
import qualified Data.Set                                     as S
import qualified Distribution.Simple.Compiler                 as C
import qualified Distribution.Simple.Setup                    as C
#if MIN_VERSION_Cabal(2,0,0)
import qualified Distribution.Types.LocalBuildInfo            as C
import qualified Distribution.Types.ComponentLocalBuildInfo   as C
import qualified Distribution.Types.PackageDescription        as C
import qualified Distribution.Types.HookedBuildInfo           as C
import qualified Distribution.Types.GenericPackageDescription as C
import qualified Distribution.Types.Library                   as C
import qualified Distribution.Types.BuildInfo                 as C
#else
import qualified Distribution.PackageDescription              as C
import qualified Distribution.Simple.LocalBuildInfo           as C
#endif
import qualified Distribution.Package                         as C
import qualified Distribution.Simple.PackageIndex             as C
import qualified Distribution.Text                            as C
import qualified Distribution.Simple.Program                  as C
import qualified Distribution.System                          as C
import qualified Distribution.Verbosity                       as V
import qualified Distribution.InstalledPackageInfo            as IPI

#if MIN_VERSION_Cabal(1,24,0)
type PackageIndex a = C.PackageIndex IPI.InstalledPackageInfo
#else
type PackageIndex a = C.PackageIndex
#endif
data Build = Static | Dynamic

main :: IO ()
main = defaultMainWithHooks (simpleUserHooks { hookedPrograms = [C.simpleProgram "libtool", C.simpleProgram "ln"]
                                             ,  confHook = elektraHaskellPluginConfHook
                                             ,  postBuild = elektraHaskellPluginPostBuildHook})

elektraHaskellPluginConfHook :: (C.GenericPackageDescription, C.HookedBuildInfo) -> C.ConfigFlags -> IO C.LocalBuildInfo
elektraHaskellPluginConfHook (description, buildInfo) flags = do
  localBuildInfo <- confHook simpleUserHooks (description, buildInfo) flags
  let packageDescription = C.localPkgDescr localBuildInfo
      library            = C.library packageDescription
      libraryBuildInfo   = fmap C.libBuildInfo library
  return localBuildInfo {
    C.localPkgDescr = packageDescription {
      C.library = fmap (\l -> l {
        C.libBuildInfo = maybe C.emptyBuildInfo (\lbi -> lbi {
          C.includeDirs  = nub $ [@CABAL_INCLUDE_DIRS@]  ++ C.includeDirs  lbi,
          C.extraLibDirs = nub $ "@CMAKE_BINARY_DIR@/lib" : C.extraLibDirs lbi
        }) libraryBuildInfo
      }) library
    }
  }

elektraHaskellPluginPostBuildHook :: Args -> C.BuildFlags -> C.PackageDescription -> C.LocalBuildInfo -> IO ()
elektraHaskellPluginPostBuildHook _ flags pd lbi = do
  logV "Preparing the Haskell dependencies.."
  libraries >>= mapM_ logV
  let ln               = C.lookupProgram (C.simpleProgram "ln") $ C.withPrograms lbi
  let maybeMainLink    = fmap mainLink ln
  let maybeMainDepLink = fmap mainDepLink ln
  let maybeDepLink     = fmap depLink ln
  let maybeDepLinks    = fmap (`fmap` dependencies) maybeDepLink
  let maybeLink        = liftA2 (:) (Just $ createDirectoryIfMissing True "haskell")
                       $ liftA2 (:) maybeMainDepLink
                       $ liftA2 (:) maybeMainLink maybeDepLinks
  maybe linkFailure (\l -> sequence_ l >> logV "Finished generating the post-build output..") maybeLink
  -- let maybeLibtool = fmap packWithLibtool $ C.lookupProgram (C.simpleProgram "libtool") $ C.withPrograms lbi
  -- let maybeAr = fmap packWithAr $ C.lookupProgram (C.simpleProgram "ar") $ C.withPrograms lbi
  -- maybe packFailure (>> logV "Finished packing all the haskell dependencies..") (maybeLibtool <|> maybeAr)
  where
    verbosity   = C.fromFlagOrDefault V.normal $ C.buildVerbosity flags
    isVerbose   = when (verbosity >= V.verbose)
    logV        = isVerbose . putStrLn
    failure str = hPutStrLn stderr str >> exitFailure
    packFailure = failure "Failed to locate libtool and ar, no program to pack the dependencies"
    linkFailure = failure "Failed to locate ln"
    libraryName = "lib" ++ C.getHSLibraryName (C.localUnitId lbi) ++ suffix lbi
    libraryPath = C.buildDir lbi ++ "/" ++ libraryName
    libraries   = sequence $ (return libraryPath :) $ map (showLibrary lbi) dependencies
    dependencies       = filter (not . isGlobalLibrary) $ getDependencyInstalledPackageInfos lbi
    createMRIScript sl = ("create " ++ libraryName) : fmap ("addlib " ++) sl ++ ["save", "end"]
    packWithAr ar = do
      logV "packing with ar"
      ls <- libraries
      readProcess (C.programPath ar) ["-M"] (unlines $ createMRIScript ls) >>= logV
    packWithLibtool lt = do
      logV "packing with libtool"
      ls <- libraries
      readProcess (C.programPath lt) ("-static" : "-o" : libraryName : ls) "" >>= logV
    mainLink ln = let filename = "libHS" ++ (C.unPackageName . C.packageName . C.package) pd ++ suffix lbi in 
      logV "linking main library" >>
      readProcess (C.programPath ln) ["-s", "-f", "@CMAKE_CURRENT_BINARY_DIR@/" ++ libraryPath, filename] "" >>= logV
    mainDepLink ln = do
      logV "linking main library for libraries"
      let readProcessFn prfx = readProcess (C.programPath ln) ["-s", "-f", "@CMAKE_CURRENT_BINARY_DIR@/" ++ libraryPath, prfx ++ "/" ++ libraryName] "" >>= logV
      readProcessFn "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@"
      readProcessFn "haskell"
    depLink ln lib = do
      l <- showLibrary lbi lib
      logV ("linking library " ++ l)
      let name prfx = prfx ++ "/libHS" ++ getLibraryName lib ++ suffix lbi
      let readProcessFn name = readProcess (C.programPath ln) ["-s", "-f", l, name] "" >>= logV
      let cmakeName = name "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@"
      unless (cmakeName == l) $ readProcessFn cmakeName
      readProcessFn "haskell"

-- The globally installed ghc libs which we don't want to link statically
-- We only want to link external dependencies grabbed via hackage, not those
-- that will be present on target systems due to the ghc requirement.
-- Later on we can include a flag to optionally link everything statically
-- thus target platforms wouldn't require ghc to be installed.
ghcLibs :: [String]
ghcLibs = ["base", "ghc-prim", "integer-gmp", "rts"]

isGlobalLibrary :: InstalledPackageInfo -> Bool
isGlobalLibrary = liftA2 (||) blacklisted global
  where
    blacklisted = flip any ghcLibs . (==) . C.display . C.pkgName . IPI.sourcePackageId
    global      = not . any (".cabal-sandbox" `isInfixOf`) . IPI.libraryDirs

findTransitiveDependencies :: PackageIndex a -> Set C.UnitId -> Set C.UnitId
findTransitiveDependencies pkgIdx initial = go S.empty (S.toList initial)
  where
    go set []  = set
    go set (q : qs)
      | q `S.member` set = go set qs
      | otherwise        = maybe (go set qs) (go (S.insert q set) . (++ qs) . IPI.depends)
                         $ C.lookupUnitId pkgIdx q

getComponents :: C.LocalBuildInfo -> [C.ComponentLocalBuildInfo]
#if MIN_VERSION_Cabal(2,0,0)
getComponents = toList . C.componentGraph
#else
getComponents = map (\(_, clbi, _) -> clbi) . C.componentsConfigs
#endif

getDependencyInstalledPackageIds :: C.LocalBuildInfo -> Set C.UnitId
getDependencyInstalledPackageIds lbi = findTransitiveDependencies (C.installedPkgs lbi) $
  S.fromList [ ipId | componentLbi <- getComponents lbi
                    , (ipId, _)    <- C.componentPackageDeps componentLbi]

getDependencyInstalledPackageInfos :: C.LocalBuildInfo -> [InstalledPackageInfo]
getDependencyInstalledPackageInfos lbi = mapMaybe (C.lookupUnitId $ C.installedPkgs lbi)
                                       $ S.toList (getDependencyInstalledPackageIds lbi)

-- As its a bit complicated to determine the exact path because depending on the OS
-- there seem to be different possibilities, we simply construct all possible filenames
-- and check which one exists
showLibrary :: C.LocalBuildInfo -> InstalledPackageInfo -> IO FilePath
showLibrary lbi ipi = fmap head $ filterM doesFileExist $ getLibraryNamePossibilities lbi ipi

getLibraryNamePossibilities :: C.LocalBuildInfo -> InstalledPackageInfo -> [FilePath]
getLibraryNamePossibilities lbi ipi = dynamicLibraryNames ++ staticLibraryNames
  where
    dynamicLibraryNames = map (++ "/libHS" ++ getLibraryName ipi ++ suffix lbi) $ getLibraryDirs ipi
    staticLibraryNames  = let showStaticName sp = '/' : intercalate "/" (init sp) ++ "/libHS" ++ last sp ++ suffix lbi
                          in  map (showStaticName . splitPath) $ getLibraryDirs ipi

splitPath :: FilePath -> [String]
splitPath s = case dropWhile (== '/') s of
                "" -> []
                s' -> w : splitPath s''
                      where (w, s'') = break (== '/') s'

getLibraryDirs :: InstalledPackageInfo -> [FilePath]
#if MIN_VERSION_Cabal(1,24,1)
getLibraryDirs ipi = IPI.libraryDirs ipi ++ IPI.libraryDynDirs ipi
#else
getLibraryDirs = IPI.libraryDirs
#endif

getLibraryName :: InstalledPackageInfo -> String
getLibraryName = C.display . IPI.installedUnitId

buildType :: C.LocalBuildInfo -> Build
buildType lbi = if C.withSharedLib lbi then Dynamic else Static

suffix ::  C.LocalBuildInfo -> String
suffix lbi = case buildType lbi of
  Static  -> ".a"
  Dynamic -> '-' : filter (/= '-') (C.showCompilerId $ C.compiler lbi) ++ dynamicSuffix lbi

dynamicSuffix :: C.LocalBuildInfo -> String
dynamicSuffix lbi = case C.hostPlatform lbi of
                    (C.Platform _ C.OSX) -> ".dylib"
                    _                    -> ".so" 
