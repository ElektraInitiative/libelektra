/**
 * @file
 *
 * @brief Source for haskell plugin
 *
 * Gets configured by cmake as this is the base file for other haskell plugins.
 * See the cmake macro add_haskell_plugin for details.
 *
 * @copyright BSD License (see LICENSE.md or https://www.libelektra.org)
 */

#include "@PLUGIN_NAME_CAPITALIZED@_stub.h"
#include "haskell.h"

#include <kdbhelper.h>

int elektraHaskellOpen (Plugin * handle, Key * errorKey)
{
	static char *argv[] = { "@PLUGIN_NAME@", 0 }, **argvPtr = argv;
	static int argc = 1;
	// Startup the haskell runtime with some dummy args
	hs_init (&argc, &argvPtr);
	return hs_elektraHaskellOpen (handle, errorKey);
}

int elektraHaskellClose (Plugin * handle, Key * errorKey)
{
	int ret = hs_elektraHaskellClose (handle, errorKey);
	// Shutdown the haskell runtime
	hs_exit ();
	return ret;
}

int elektraHaskellGet (Plugin * handle, KeySet * returned, Key * parentKey)
{
	if (!elektraStrCmp (keyName (parentKey), "system/elektra/modules/@PLUGIN_NAME@"))
	{
		KeySet * contract = ksNew (
			30,
			keyNew ("system/elektra/modules/@PLUGIN_NAME@", KEY_VALUE, "@PLUGIN_NAME@ plugin waits for your orders", KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports", KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/open", KEY_FUNC, elektraHaskellOpen, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/close", KEY_FUNC, elektraHaskellClose, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/get", KEY_FUNC, elektraHaskellGet, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/set", KEY_FUNC, elektraHaskellSet, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/error", KEY_FUNC, elektraHaskellError, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/checkconf", KEY_FUNC, elektraHaskellCheckConfig, KEY_END),
// clang-format off
#include ELEKTRA_README (@PLUGIN_NAME@)
			// clang-format on
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/infos/version", KEY_VALUE, PLUGINVERSION, KEY_END), KS_END);
		ksAppend (returned, contract);
		ksDel (contract);

		return ELEKTRA_PLUGIN_STATUS_SUCCESS;
	}
	return hs_elektraHaskellGet (handle, returned, parentKey);
}

int elektraHaskellSet (Plugin * handle, KeySet * returned, Key * parentKey)
{
	// set all keys
	// this function is optional
	return hs_elektraHaskellSet (handle, returned, parentKey);
}

int elektraHaskellError (Plugin * handle, KeySet * returned, Key * parentKey)
{
	// handle errors (commit failed)
	// this function is optional
	return hs_elektraHaskellError (handle, returned, parentKey);
}

int elektraHaskellCheckConfig (Key * errorKey, KeySet * conf)
{
	// validate plugin configuration
	// this function is optional
	return hs_elektraHaskellCheckConfig (errorKey, conf);
}

// clang-format off
Plugin * ELEKTRA_PLUGIN_EXPORT (@PLUGIN_NAME@)
{
	return elektraPluginExport ("@PLUGIN_NAME@",
		ELEKTRA_PLUGIN_OPEN,	&elektraHaskellOpen,
		ELEKTRA_PLUGIN_CLOSE,	&elektraHaskellClose,
		ELEKTRA_PLUGIN_GET,	&elektraHaskellGet,
		ELEKTRA_PLUGIN_SET,	&elektraHaskellSet,
		ELEKTRA_PLUGIN_ERROR,	&elektraHaskellError,
		ELEKTRA_PLUGIN_END);
}
