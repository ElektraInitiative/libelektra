/**
 * @file
 *
 * @brief Source for haskell plugin
 *
 * Gets configured by cmake as this is the base file for other haskell plugins.
 * See the cmake macro add_haskell_plugin for details.
 *
 * @copyright BSD License (see LICENSE.md or https://www.libelektra.org)
 */

#include "@PLUGIN_NAME_CAPITALIZED@_stub.h"
#include "haskell.h"

#include <kdbhelper.h>
#include <kdbpluginprocess.h>
#include <stdio.h>

// TODO:
// Haskell plugins need some custom way to store plugin data
// Directly calling pluginSetData or pluginGetData would override the pluginProcess data on some OS
// and then crash everything... (works on mac, fails on linux)

int elektraHaskellOpen (Plugin * handle, Key * errorKey)
{
	ElektraPluginProcess * pp = elektraPluginGetData (handle);
	if (pp == NULL)
	{
		if ((pp = elektraPluginProcessInit (errorKey)) == NULL) return ELEKTRA_PLUGIN_STATUS_ERROR;
		elektraPluginSetData (handle, pp);
		if (!elektraPluginProcessIsParent (pp)) elektraPluginProcessStart (handle, pp);
	}
	if (elektraPluginProcessIsParent (pp)) return elektraPluginProcessOpen (pp, errorKey);

	char *argv[] = { "@PLUGIN_NAME@", 0 }, **argvPtr = argv;
	int argc = 1;
	// Startup the haskell runtime with some dummy args
	// Subsequent init calls are ignored by the runtime
	hs_init (&argc, &argvPtr);
	return hs_elektraHaskellOpen (handle, errorKey);
}

int elektraHaskellClose (Plugin * handle, Key * errorKey)
{
	ElektraPluginProcess * pp = elektraPluginGetData (handle);
	if (elektraPluginProcessIsParent (pp))
	{
		int result = elektraPluginProcessSend (pp, ELEKTRA_PLUGINPROCESS_CLOSE, NULL, errorKey);
		if (elektraPluginProcessClose (pp, errorKey)) elektraPluginSetData (handle, NULL);
		return result;
	}

	int ret = hs_elektraHaskellClose (handle, errorKey);
	// Shutdown the haskell runtime
	// Due to an unfortunate bug within GHC's ffi implementation we cannot
	// restart the runtime if it got closed once during elektra's runtime
	// in the same process.
	// Therefore we use the plugin process library to launch the runtime
	// in a separate process.
	// https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/bugs.html#infelicities-ffi
	hs_exit ();
	return ret;
}

int elektraHaskellGet (Plugin * handle, KeySet * returned, Key * parentKey)
{
	if (!elektraStrCmp (keyName (parentKey), "system/elektra/modules/@PLUGIN_NAME@"))
	{
		KeySet * contract = ksNew (
			30,
			keyNew ("system/elektra/modules/@PLUGIN_NAME@", KEY_VALUE, "@PLUGIN_NAME@ plugin waits for your orders", KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports", KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/open", KEY_FUNC, elektraHaskellOpen, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/close", KEY_FUNC, elektraHaskellClose, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/get", KEY_FUNC, elektraHaskellGet, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/set", KEY_FUNC, elektraHaskellSet, KEY_END),
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/exports/error", KEY_FUNC, elektraHaskellError, KEY_END),
// clang-format off
#include ELEKTRA_README (@PLUGIN_NAME@)
			// clang-format on
			keyNew ("system/elektra/modules/@PLUGIN_NAME@/infos/version", KEY_VALUE, PLUGINVERSION, KEY_END), KS_END);
		ksAppend (returned, contract);
		ksDel (contract);

		return ELEKTRA_PLUGIN_STATUS_SUCCESS;
	}

	ElektraPluginProcess * pp = elektraPluginGetData (handle);
	if (elektraPluginProcessIsParent (pp)) return elektraPluginProcessSend (pp, ELEKTRA_PLUGINPROCESS_GET, returned, parentKey);

	return hs_elektraHaskellGet (handle, returned, parentKey);
}

int elektraHaskellSet (Plugin * handle, KeySet * returned, Key * parentKey)
{
	ElektraPluginProcess * pp = elektraPluginGetData (handle);
	if (elektraPluginProcessIsParent (pp)) return elektraPluginProcessSend (pp, ELEKTRA_PLUGINPROCESS_SET, returned, parentKey);

	return hs_elektraHaskellSet (handle, returned, parentKey);
}

int elektraHaskellError (Plugin * handle, KeySet * returned, Key * parentKey)
{
	ElektraPluginProcess * pp = elektraPluginGetData (handle);
	if (elektraPluginProcessIsParent (pp)) return elektraPluginProcessSend (pp, ELEKTRA_PLUGINPROCESS_ERROR, returned, parentKey);

	return hs_elektraHaskellError (handle, returned, parentKey);
}

// clang-format off
Plugin * ELEKTRA_PLUGIN_EXPORT (@PLUGIN_NAME@)
{
	return elektraPluginExport ("@PLUGIN_NAME@",
		ELEKTRA_PLUGIN_OPEN,	&elektraHaskellOpen,
		ELEKTRA_PLUGIN_CLOSE,	&elektraHaskellClose,
		ELEKTRA_PLUGIN_GET,		&elektraHaskellGet,
		ELEKTRA_PLUGIN_SET,		&elektraHaskellSet,
		ELEKTRA_PLUGIN_ERROR,	&elektraHaskellError,
		ELEKTRA_PLUGIN_END);
}
