{-# LANGUAGE OverloadedStrings, CPP #-}
module Elektra.Typechecker () where

import Elektra.Key
import Elektra.KeySet
import Elektra.KDB
import Elektra.Plugin
import Elektra.Ease
import Elektra.SpecTranslator
import Elektra.SpecParser
import Elektra.Errors

import Control.Monad                (mapM_, forM_, (>=>))
import Control.Logger.Simple
import Data.Bool                    (bool)
import Data.List                    (intercalate, isPrefixOf)
import Data.Maybe                   (fromJust)
import Foreign.Ptr
import System.IO.Temp               (writeTempFile)
import System.Directory             (removeFile)
import System.Environment           (lookupEnv)
import Text.PrettyPrint

import Language.Haskell.Exts.Pretty
import Language.Haskell.Interpreter
import Language.Haskell.Interpreter.Unsafe

import qualified Data.Text as T

data CheckMode = Get | Set

typecheck :: Plugin -> KeySet -> Key -> CheckMode -> IO Bool
typecheck p ks k c = withGlobalLogging (LogConfig Nothing ("@ENABLE_LOGGER@" == "ON")) $ do
  name <- keyName k
  logDebugT $ "Parse Specifications at " ++ name
  logDebugT $ "Where we have the keys "
  keys <- ksList ks
  forM_ keys $ \dk -> do
    logDebugT $ show dk
    metakeys <- keyListMeta dk
    forM_ metakeys (logDebugT . show)

  conf <- elektraPluginGetConfig p

  -- Otherwise ksCut would remove keys, we don't want that behavior here
  ksc <- ksDup ks
  kscc <- ksCut ksc k

  -- load type signatures if a path to prelude is specified
  -- it is important that the path to prelude is not "under"
  -- this path otherwise it would lead to recursions
  logDebugT $ "the configuration is " ++ show conf
  prelude <- ifKey (ksLookupByName conf "/prelude") (keyString >=> fmap Just . keyNew) (return Nothing)
  ps <- maybe (ksNew 0) readPrelude prelude
  logDebugT $ "Prelude contained " ++ show ps

  -- now rename the prelude keys to the correct parent key
  -- and append kscc to pdcc to avoid overwriting custom type specifications
  -- We cannot rename keys stored in a keyset to append it to a new one
  rs <- ksGetSize ps >>= ksNew
  -- if its Nothing, there will be an empty list so this is fine
  ksList ps >>= mapM_ (renamePrelude (fromJust prelude) name >=> ksAppendKey rs)
  ksAppend rs kscc

  logDebugT $ "Combined specifications are " ++ show rs

  typeSpecs <- parseTypeSpecifications k rs
  logDebugT $ "Got " ++ show (length typeSpecs) ++ " function specifications"
  mapM_ (logDebugT . show) typeSpecs

  keySpecs <- parseKeySpecifications k rs
  logDebugT $ "Got " ++ show (length keySpecs) ++ " key specifications"
  mapM_ (logDebugT . show) keySpecs

  putStepLn "Done Parsing all Specifications, now translate them."
  let rendered = renderStyle style {lineLength = 320} $ prettyPrim $ translateSpecifications typeSpecs keySpecs
  logDebugT rendered

  putStepLn "Done Translating all Specifications."
  specFile <- writeTempFile "/tmp/" "testSpecification.hs" rendered

  -- So we can override it for the build tests
  pdb <- lookupEnv "SANDBOX_PACKAGEDB"
  let args = filter (not . null) ["-package-db=" ++ maybe "@TYPECHECKER_GHC_PLUGIN@" id pdb, "-fplugin=Elektra.RegexTypeChecker", "-v"]
  r <- unsafeRunInterpreterWithArgs args (keyInterpreter specFile)
  removeFile specFile
  case r of
    Left err -> do
      let errStr = errorString err
      case c of
        Set -> triggerError 193 k errStr
        Get -> triggerWarnings 192 k errStr
      logDebugT errStr
      return True
    Right () -> return False
  where
    putStepLn s = logDebugT $ "\n" ++ s ++ "\n"
    readPrelude prelude = do
      pp <- keyDup prelude
      logDebugT $ "Opening prelude at " ++ show pp
      kdbOpen pp $ \p -> do
        pd <- ksNew 10
        pp2 <- keyDup pp
        kdbGet p pd pp2
        -- play it safe and copy it here so ksCut won't affect anything else
        ksDup pd >>= flip ksCut pp
    renamePrelude prelude name p = do
      r <- keyGetRelativeName p prelude
      c <- keyDup p
      keySetName c $ name ++ "/elektra/spec/" ++ r
      return c

keyInterpreter :: FilePath -> InterpreterT IO ()
keyInterpreter specFile = do
  loadModules [specFile]
  say "Loaded our rendered specification, now we can infer the stuff in it."
  setTopLevelModules ["TestSpecification"]
  getModuleExports "TestSpecification" >>= mapM_ showTypes . filter isFun . filter (not . isPrefixOf "specElektraRawKey" . name)
  where
    showTypes c = typeOf (name c) >>= say . ((name c ++ " has an infered type of ") ++)
    isFun (Fun _) = True
    isFun _ = False

errorString :: InterpreterError -> String
errorString (WontCompile es) = intercalate "\n" (header : map unbox es)
  where
    header = "ERROR: Won't compile:"
    unbox (GhcError e) = e
errorString e = show e

isCheckingPrelude :: Key -> IO Bool
isCheckingPrelude k = do
  bn1 <- keyBaseName k
  keyDeleteBaseName k
  bn2 <- keyBaseName k
  return $ bn1 == "spec" && bn2 == "elektra"

say :: String -> Interpreter ()
say = liftIO . logDebugT

logDebugT :: MonadIO m => String -> m ()
logDebugT = logDebug . T.pack

elektraTypecheckerOpen :: Plugin -> Key -> IO PluginStatus
elektraTypecheckerOpen _ _ = return Success
hs_elektraHaskellOpen = elektraPluginOpenWith elektraTypecheckerOpen

elektraTypecheckerClose :: Plugin -> Key -> IO PluginStatus
elektraTypecheckerClose _ _ = return Success
hs_elektraHaskellClose = elektraPluginCloseWith elektraTypecheckerClose

elektraTypecheckerGet :: Plugin -> KeySet -> Key -> IO PluginStatus
elektraTypecheckerGet p ks k = isCheckingPrelude k >>= bool (typecheck p ks k Get >> return NoUpdate) (return NoUpdate)
hs_elektraHaskellGet = elektraPluginGetWith elektraTypecheckerGet

elektraTypecheckerSet :: Plugin -> KeySet -> Key -> IO PluginStatus
elektraTypecheckerSet p ks k = isCheckingPrelude k >>= bool (bool NoUpdate Error <$> typecheck p ks k Set) (return NoUpdate)
hs_elektraHaskellSet = elektraPluginSetWith elektraTypecheckerSet

elektraTypecheckerError :: Plugin -> KeySet -> Key -> IO PluginStatus
elektraTypecheckerError _ _ _ = return Success
hs_elektraHaskellError = elektraPluginErrorWith elektraTypecheckerError

foreign export ccall hs_elektraHaskellOpen :: Ptr Plugin -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellClose :: Ptr Plugin -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellGet :: Ptr Plugin -> Ptr KeySet -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellSet :: Ptr Plugin -> Ptr KeySet -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellError :: Ptr Plugin -> Ptr KeySet -> Ptr Key -> IO Int
