#@META fallback/#1 = spec/examples/intKey
fallbackIntKey = 

#@META check/evenInt = _
#@META check/int = _
#@META check/positiveInt = _
#@META restrict/null = _
#@META restrict/write = _
intKey = 5

#@META check/evenInt = _
#@META check/int = _
#@META check/positiveInt = _
#@META restrict/null = _
#@META restrict/write = _
otherIntKey = 6

#@META check/int = _
#@META fallback/#1 = spec/examples/otherIntKey
otherFallbackIntKey = 

#@META restrict/write = _
restricted = 5

#@META override/#1 = spec/examples/restricted
overrideRestricted = 5

nullary = 5

#@META override/#1 = spec/examples/nullary
#@META restrict/null = _
nonNullarry = 6

#@META check/evenInt = _
#@META fallback/#1 = spec/examples/intKey
otherKey = 

untypedKey = 

#@META fallback/#1 = spec/examples/otherKey
#@META fallback/#2 = spec/examples/untypedKey
transitiveFallbackKey = 

#@META fallback/#1 = spec/examples/fallbackIntKey
#@META override/#1 = spec/examples/untypedKey
overwriteKey = 

#@META check/evenInt = _
#@META check/positiveInt = _
#@META fallback/#1 = spec/examples/intKey
incompatibleKey = 

#@META specElektra/type = self :: a -> self :: ('TyLft 'In NonNull a)
#@META todo = default is a haskell keyword and can't be a function name... filter for that...
specElektra/defaultz = 

#@META specElektra/type = self :: a -> self :: ('TyLft 'In NonNull a)
specElektra/restrict/null = 

#@META specElektra/type = self :: a -> self :: ('TyLft 'Out NoWrite a)
specElektra/restrict/write = 

#@META specElektra/type = self :: a -> self :: ('TyLft 'Same Encrypted a)
#@META todo = some possibility to define 'TyLft 'Same Encrypted a as a type? type alias would be enough though
specElektra/encrypt = 

#@META specElektra/type = self :: ('TyLft 'Same Encrypted a) -> self :: a
specElektra/decrypt = 

#@META specElektra/type = self :: a -> self :: (a <+> Int)
specElektra/check/int = 

#@META specElektra/type = self :: a -> self :: (a <+> PositiveInt)
specElektra/check/positiveInt = 

#@META specElektra/type = self :: a -> self :: (a <+> EvenInt)
specElektra/check/evenInt = 

#@META specElektra/impl = impl (Key p1 v1@(P.Just _)) (Key _ _) = Key p1 v1 \n impl (Key p P.Nothing) (Key _ v) = Key p v
#@META specElektra/type = self :: a -> path :: b -> self :: (a <=> b)
specElektra/fallback/# = path

#@META specElektra/impl = impl (Key p1 v1@(P.Just _)) (Key _ _) = Key p1 v1 \n impl (Key p P.Nothing) (Key _ v) = Key p v
#@META specElektra/type = path :: b -> self :: a -> path :: (b <=> a)
specElektra/override/# = path
