#@META fallback/#1 = spec/examples/intkey
fallbackintkey = 

#@META check/int/even = _
#@META check/int = _
#@META check/int/positive = _
#@META restrict/null = _
#@META restrict/write = _
intkey = 5

#@META check/int/even = _
#@META check/int = _
#@META check/int/positive = _
#@META restrict/null = _
#@META restrict/write = _
otherintkey = 6

#@META check/int = _
#@META fallback/#1 = spec/examples/otherintkey
otherfallbackintkey = 

#@META restrict/write = _
restricted = 5

#@META override/#1 = spec/examples/restricted
overriderestricted = 5

nullary = 5

#@META override/#1 = spec/examples/nullary
#@META restrict/null = _
nonnullarry = 6

#@META check/int/even = _
#@META fallback/#1 = spec/examples/intkey
otherkey = 

untypedkey = 

#@META fallback/#1 = spec/examples/otherkey
#@META fallback/#2 = spec/examples/untypedkey
transitivefallbackkey = 

#@META fallback/#1 = spec/examples/fallbackintkey
#@META override/#1 = spec/examples/untypedkey
overwritekey = 

#@META check/int/even = _
#@META check/positiveInt = _
#@META fallback/#1 = spec/examples/intkey
incompatiblekey = 

#@META elektra/spec/type = self :: a -> self :: ('TyLft 'In NonNull a)
#@META todo = default is a haskell keyword and can't be a function name... filter for that...
elektra/spec/defaultz = 

#@META elektra/spec/type = self :: a -> self :: ('TyLft 'In NonNull a)
elektra/spec/restrict/null = 

#@META elektra/spec/type = self :: a -> self :: ('TyLft 'Out NoWrite a)
elektra/spec/restrict/write = 

#@META elektra/spec/type = self :: a -> self :: ('TyLft 'Same Encrypted a)
#@META todo = some possibility to define 'TyLft 'Same Encrypted a as a type? type alias would be enough though
elektra/spec/encrypt = 

#@META elektra/spec/type = self :: ('TyLft 'Same Encrypted a) -> self :: a
elektra/spec/decrypt = 

#@META elektra/spec/type = self :: a -> self :: (a <+> Int)
elektra/spec/check/int = 

#@META elektra/spec/type = self :: a -> self :: (a <+> PositiveInt)
elektra/spec/check/int/positive = 

#@META elektra/spec/type = self :: a -> self :: (a <+> EvenInt)
elektra/spec/check/int/even = 

#@META elektra/spec/impl = impl (Key p1 v1@(P.Just _)) (Key _ _) = Key p1 v1 \n impl (Key p P.Nothing) (Key _ v) = Key p v
#@META elektra/spec/type = self :: a -> path :: b -> self :: (a <=> b)
elektra/spec/fallback/# = path

#@META elektra/spec/impl = impl (Key p1 v1@(P.Just _)) (Key _ _) = Key p1 v1 \n impl (Key p P.Nothing) (Key _ v) = Key p v
#@META elektra/spec/type = path :: b -> self :: a -> path :: (b <=> a)
elektra/spec/override/# = path
