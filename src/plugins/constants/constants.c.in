/**
 * @file
 *
 * @brief
 *
 * @copyright BSD License (see LICENSE.md or https://www.libelektra.org)
 */

#include <kdb.h>
#include <kdbconfig.h>
#include <kdbmacros.h>
#include <kdbplugin.h>

#include <string.h>

#include <kdberrors.h>

int elektraConstantsGet (Plugin * handle ELEKTRA_UNUSED, ElektraKeyset * returned ELEKTRA_UNUSED, ElektraKey * parentKey ELEKTRA_UNUSED);
int elektraConstantsSet (Plugin * handle ELEKTRA_UNUSED, ElektraKeyset * returned ELEKTRA_UNUSED, ElektraKey * parentKey ELEKTRA_UNUSED);

static void elektraAddKeyValue (ElektraKeyset * ks, ElektraKey * parentKey, const char * key, const char * value)
{
	ElektraKey * k = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (k, key);
	elektraKeySetString (k, value);
	elektraKeysetAppendKey (ks, k);
}

static void elektraAddConstants (ElektraKeyset * ks, ElektraKey * parentKey)
{
	ElektraKey * key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeysetAppendKey (ks, key);

	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "version");
	elektraKeySetString (key, "Duplicate of version info also found below system:/elektra/version");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (key, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "version/KDB_VERSION");
	elektraKeySetString (key, "@KDB_VERSION@");
	elektraKeysetAppendKey (ks, key);

	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "version/KDB_VERSION_MAJOR");
	elektraKeySetString (key, "@KDB_VERSION_MAJOR@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "version/KDB_VERSION_MINOR");
	elektraKeySetString (key, "@KDB_VERSION_MINOR@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "version/KDB_VERSION_PATCH");
	elektraKeySetString (key, "@KDB_VERSION_PATCH@");
	elektraKeysetAppendKey (ks, key);


	elektraAddKeyValue (ks, parentKey, "version/SO_VERSION", "@SO_VERSION@");
	elektraAddKeyValue (ks, parentKey, "version/SO_VERSION_TOOLS", "@SO_VERSION_TOOLS@");
	elektraAddKeyValue (ks, parentKey, "version/SO_VERSION_GETENV", "@SO_VERSION_GETENV@");


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake");
	elektraKeySetString (key, "All cmake variables as defined in the file cmake/ElektraCache.cmake");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/PLUGINS");
	elektraKeySetString (key, "@ADDED_PLUGINS@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TOOLS");
	elektraKeySetString (key, "@TOOLS@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/KDB_DB_SYSTEM");
	elektraKeySetString (key, "@KDB_DB_SYSTEM@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/KDB_DB_HOME");
	elektraKeySetString (key, "@KDB_DB_HOME@");
	elektraKeysetAppendKey (ks, key);

	elektraAddKeyValue (ks, parentKey, "cmake/KDB_DB_SPEC", "@KDB_DB_SPEC@");
	elektraAddKeyValue (ks, parentKey, "cmake/KDB_DB_DIR", "@KDB_DB_DIR@");
	elektraAddKeyValue (ks, parentKey, "cmake/KDB_DB_FILE", "@KDB_DB_FILE@");
	elektraAddKeyValue (ks, parentKey, "cmake/KDB_DB_INIT", "@KDB_DB_INIT@");
	elektraAddKeyValue (ks, parentKey, "cmake/KDB_DEFAULT_RESOLVER", "@KDB_DEFAULT_RESOLVER@");
	elektraAddKeyValue (ks, parentKey, "cmake/KDB_DEFAULT_STORAGE", "@KDB_DEFAULT_STORAGE@");

	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/KDB_DB_USER");
	elektraKeySetString (key, "@KDB_DB_USER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/GTEST_ROOT");
	elektraKeySetString (key, "@GTEST_ROOT@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/BUILD_SHARED");
	elektraKeySetString (key, "@BUILD_SHARED@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/BUILD_FULL");
	elektraKeySetString (key, "@BUILD_FULL@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/BUILD_STATIC");
	elektraKeySetString (key, "@BUILD_STATIC@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/BINDINGS");
	elektraKeySetString (key, "@ADDED_BINDINGS@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_INCLUDE_FOLDER");
	elektraKeySetString (key, "@TARGET_INCLUDE_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_CMAKE_FOLDER");
	elektraKeySetString (key, "@TARGET_CMAKE_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_PLUGIN_FOLDER");
	elektraKeySetString (key, "@TARGET_PLUGIN_FOLDER@");
	elektraKeysetAppendKey (ks, key);

	elektraAddKeyValue (ks, parentKey, "cmake/ENABLE_DEBUG", "@ENABLE_DEBUG@");
	elektraAddKeyValue (ks, parentKey, "cmake/ENABLE_LOGGER", "@ENABLE_LOGGER@");
	elektraAddKeyValue (ks, parentKey, "cmake/ENABLE_ASAN", "@ENABLE_ASAN@");

	elektraAddKeyValue (ks, parentKey, "cmake/BUILTIN_PLUGIN_FOLDER", BUILTIN_PLUGIN_FOLDER);
	elektraAddKeyValue (ks, parentKey, "cmake/BUILTIN_DATA_FOLDER", BUILTIN_DATA_FOLDER);
	elektraAddKeyValue (ks, parentKey, "cmake/BUILTIN_EXEC_FOLDER", BUILTIN_EXEC_FOLDER);

	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_PKGCONFIG_FOLDER");
	elektraKeySetString (key, "@TARGET_PKGCONFIG_FOLDER@");
	elektraKeysetAppendKey (ks, key);

	elektraAddKeyValue (ks, parentKey, "cmake/TARGET_DOCUMENTATION_TEXT_FOLDER", "@TARGET_DOCUMENTATION_TEXT_FOLDER@");
	elektraAddKeyValue (ks, parentKey, "cmake/TARGET_DOCUMENTATION_HTML_FOLDER", "@TARGET_DOCUMENTATION_HTML_FOLDER@");
	elektraAddKeyValue (ks, parentKey, "cmake/TARGET_DOCUMENTATION_MAN_FOLDER", "@TARGET_DOCUMENTATION_MAN_FOLDER@");
	elektraAddKeyValue (ks, parentKey, "cmake/TARGET_DOCUMENTATION_LATEX_FOLDER", "@TARGET_DOCUMENTATION_LATEX_FOLDER@");

	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_TOOL_EXEC_FOLDER");
	elektraKeySetString (key, "@TARGET_TOOL_EXEC_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_TOOL_DATA_FOLDER");
	elektraKeySetString (key, "@TARGET_TOOL_DATA_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_TEST_DATA_FOLDER");
	elektraKeySetString (key, "@TARGET_TEST_DATA_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/TARGET_TEMPLATE_FOLDER");
	elektraKeySetString (key, "@TARGET_TEMPLATE_FOLDER@");
	elektraKeysetAppendKey (ks, key);

	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/LIB_SUFFIX");
	elektraKeySetString (key, "@LIB_SUFFIX@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "cmake/CMAKE_INSTALL_PREFIX");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler");
	elektraKeySetString (key, "Flags defined for compilers as defined in ElektraCompiling.cmake");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler/c_flags");
	elektraKeySetString (key, "@C_FLAGS_ESCAPED@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler/id");
	elektraKeySetString (key, "@CMAKE_CXX_COMPILER_ID@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler/coverage");
	elektraKeySetString (key, "@ENABLE_COVERAGE@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler/cxx_flags");
	elektraKeySetString (key, "@CXX_FLAGS_ESCAPED@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler/pic_flags");
	elektraKeySetString (key, "@CMAKE_PIC_FLAGS@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "compiler/static_flags");
	elektraKeySetString (key, "@CMAKE_STATIC_FLAGS@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "macros");
	elektraKeySetString (key, "Define the macros from kdbos.h and kdbconfig.h");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "macros/KDB_MAX_PATH_LENGTH");
	elektraKeySetString (key, ELEKTRA_STRINGIFY (KDB_MAX_PATH_LENGTH));
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "macros/KDB_FILE_MODE");
	elektraKeySetString (key, ELEKTRA_STRINGIFY (KDB_FILE_MODE));
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "macros/KDB_DIR_MODE");
	elektraKeySetString (key, ELEKTRA_STRINGIFY (KDB_DIR_MODE));
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "macros/KDB_PATH_SEPARATOR");
	elektraKeySetString (key, ELEKTRA_STRINGIFY (KDB_PATH_SEPARATOR));
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "macros/KDB_PATH_ESCAPE");
	elektraKeySetString (key, ELEKTRA_STRINGIFY (KDB_PATH_ESCAPE));
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package");
	elektraKeySetString (key, "Infos about the package as it is installed");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/prefix");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/libdir");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@/lib@LIB_SUFFIX@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/includedir");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@/include/@TARGET_INCLUDE_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/plugindir");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@/lib@LIB_SUFFIX@/@TARGET_PLUGIN_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/tool_execdir");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@/@TARGET_TOOL_EXEC_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/templatedir");
	elektraKeySetString (key, "@CMAKE_INSTALL_PREFIX@/@TARGET_TEMPLATE_FOLDER@");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/libs");
	elektraKeySetString (key, "-L@CMAKE_INSTALL_PREFIX@/lib@LIB_SUFFIX@ -lelektra");
	elektraKeysetAppendKey (ks, key);


	key = elektraKeyDup (parentKey, ELEKTRA_KEY_CP_ALL);
	elektraKeyAddName (key, "package/cflags");
	elektraKeySetString (key, "-I@CMAKE_INSTALL_PREFIX@/include/@TARGET_INCLUDE_FOLDER@");
	elektraKeysetAppendKey (ks, key);
}

// TODO (kodebach): should be standalone backend
int elektraConstantsGet (Plugin * handle ELEKTRA_UNUSED, ElektraKeyset * ks, ElektraKey * parentKey)
{
	if (!strcmp (elektraKeyName (parentKey), "system:/elektra/modules/constants"))
	{
		elektraKeysetAppendKey (ks,
			     elektraKeyNew ("system:/elektra/modules/constants", ELEKTRA_KEY_VALUE, "constants plugin waits for your orders", ELEKTRA_KEY_END));
		elektraKeysetAppendKey (ks, elektraKeyNew ("system:/elektra/modules/constants/exports", ELEKTRA_KEY_END));
		elektraKeysetAppendKey (ks, elektraKeyNew ("system:/elektra/modules/constants/exports/get", ELEKTRA_KEY_FUNC, elektraConstantsGet, ELEKTRA_KEY_END));
		elektraKeysetAppendKey (ks, elektraKeyNew ("system:/elektra/modules/constants/exports/set", ELEKTRA_KEY_FUNC, elektraConstantsSet, ELEKTRA_KEY_END));
		ElektraKeyset * contract =
			elektraKeysetNew (30,
#include "readme_constants.c"
			       elektraKeyNew ("system:/elektra/modules/constants/infos/version", ELEKTRA_KEY_VALUE, PLUGINVERSION, ELEKTRA_KEY_END), ELEKTRA_KS_END);
		elektraKeysetAppend (ks, contract);
		elektraKeysetDel (contract);
		return 1;
	}

	elektraAddConstants (ks, parentKey);

	return 1; /* success */
}

int elektraConstantsSet (Plugin * handle ELEKTRA_UNUSED, ElektraKeyset * returned, ElektraKey * parentKey)
{
	ElektraKeyset * info = elektraKeysetNew (0, ELEKTRA_KS_END);
	elektraAddConstants (info, parentKey);
	ELEKTRA_SET_ERROR_READ_ONLY (info, returned, parentKey);
	return 0;
}

Plugin * ELEKTRA_PLUGIN_EXPORT
{
	// clang-format off
	return elektraPluginExport("constants",
		ELEKTRA_PLUGIN_GET,	&elektraConstantsGet,
		ELEKTRA_PLUGIN_SET,	&elektraConstantsSet,
		ELEKTRA_PLUGIN_END);
}
