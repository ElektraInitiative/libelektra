/**
 * @file
 *
 * @brief Exported methods of the Library
 *
 * The documentation is in source files, not in this header file.
 * Enum types and macros are documented in src/libs/elektra/kdbenum.c.
 *
 * For already rendered API documentation, see https://doc.libelektra.org/api/
 *
 * @copyright BSD License (see LICENSE.md or https://www.libelektra.org)
 */

// clang-format off

@DISCLAMER@

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the BSD License (revised).                      *
 *                                                                         *
 ***************************************************************************/

#ifndef KDB_H
#define KDB_H

#define ELEKTRA_SENTINEL // needed for SWIG
#define KDB_VERSION "@KDB_VERSION@"
#define KDB_VERSION_MAJOR @KDB_VERSION_MAJOR@
#define KDB_VERSION_MINOR @KDB_VERSION_MINOR@
#define KDB_VERSION_PATCH @KDB_VERSION_PATCH@
#define KDB_PATH_SEPARATOR '/'
#define KDB_PATH_ESCAPE '\\'
#cmakedefine ELEKTRA_ENABLE_OPTIMIZATIONS

#ifdef __cplusplus
extern "C" {
#endif

#include "kdbos.h"
#include <stdint.h>

#ifdef __cplusplus
}
#endif

#define KDB_GET_PHASE_RESOLVER "resolver"
#define KDB_GET_PHASE_CACHECHECK "cachecheck"
#define KDB_GET_PHASE_PRE_STORAGE "prestorage"
#define KDB_GET_PHASE_STORAGE "storage"
#define KDB_GET_PHASE_POST_STORAGE "poststorage"

#define KDB_SET_PHASE_RESOLVER "resolver"
#define KDB_SET_PHASE_PRE_STORAGE "prestorage"
#define KDB_SET_PHASE_STORAGE "storage"
#define KDB_SET_PHASE_POST_STORAGE "poststorage"
#define KDB_SET_PHASE_PRE_COMMIT "precommit"
#define KDB_SET_PHASE_COMMIT "commit"
#define KDB_SET_PHASE_POST_COMMIT "postcommit"
#define KDB_SET_PHASE_PRE_ROLLBACK "prerollback"
#define KDB_SET_PHASE_ROLLBACK "rollback"
#define KDB_SET_PHASE_POST_ROLLBACK "postrollback"

enum {
	KEY_NAME=1,
	KEY_VALUE=1<<1,
	KEY_FLAGS=3,
	KEY_COMMENT=1<<3,
	KEY_BINARY=1<<4,
	KEY_SIZE=1<<11,
	KEY_FUNC=1<<12,
	KEY_META=1<<15,
	KEY_NULL=1<<16,
	KEY_LOCK_NAME=1<<17,
	KEY_LOCK_VALUE=1<<18,
	KEY_LOCK_META=1<<19,
};

#ifdef __cplusplus
#define KEY_END (static_cast<void *> (0))
#else
#define KEY_END ((void *) 0)
#endif

typedef int elektraLockFlags;
typedef int elektraKeyFlags;

enum {
	KEY_CP_NAME   = 1<<0,
	KEY_CP_STRING = 1<<1,
	KEY_CP_VALUE  = 1<<2,
	KEY_CP_META   = 1<<3,
	KEY_CP_ALL    = KEY_CP_NAME | KEY_CP_VALUE | KEY_CP_META,
};
typedef unsigned int elektraCopyFlags;

enum {
	KDB_O_NONE=0,
	KDB_O_DEL=1,
	KDB_O_POP=1<<1
};
typedef int elektraLookupFlags;

enum {
	KEY_NS_NONE=0,
	KEY_NS_CASCADING=1,
	KEY_NS_META=2,
	KEY_NS_SPEC=3,
	KEY_NS_PROC=4,
	KEY_NS_DIR=5,
	KEY_NS_USER=6,
	KEY_NS_SYSTEM=7,
	KEY_NS_DEFAULT=8,
};
typedef int elektraNamespace;

static const elektraNamespace KEY_NS_FIRST = KEY_NS_META;
static const elektraNamespace KEY_NS_LAST = KEY_NS_DEFAULT;

typedef ssize_t elektraCursor;


#ifdef __cplusplus
namespace ckdb {
extern "C" {
#endif

typedef struct _KDB	ElektraKdb;
typedef struct _Key	ElektraKey;
typedef struct _KeySet	ElektraKeyset;

#ifdef __cplusplus
using KDB = ckdb::ElektraKdb;
using Key = ckdb::ElektraKey;
using KeySet = ckdb::ElektraKeyset;
#endif

/**************************************
 *
 * KDB methods
 *
 **************************************/

ElektraKdb * kdbOpen (const ElektraKeyset * contract, ElektraKey *parentKey);

int kdbClose (ElektraKdb *handle, ElektraKey *errorKey);

int kdbGet (ElektraKdb *handle, ElektraKeyset *returned,
	ElektraKey *parentKey);
int kdbSet (ElektraKdb *handle, ElektraKeyset *returned,
	ElektraKey *parentKey);

/**************************************
 *
 * Key methods
 *
 **************************************/

/* Basic Methods */
ElektraKey *keyNew (const char *keyname, ...) ELEKTRA_SENTINEL;
ElektraKey *keyVNew (const char *keyname, va_list ap);

ElektraKey * keyCopy (ElektraKey *dest, const ElektraKey *source, elektraCopyFlags flags);

int keyClear (ElektraKey *key);
int keyDel (ElektraKey *key);

uint16_t keyIncRef (ElektraKey *key);
uint16_t keyDecRef (ElektraKey *key);
uint16_t keyGetRef (const ElektraKey *key);

/* Meta Info */
int keyRewindMeta (ElektraKey *key);
const ElektraKey *keyNextMeta (ElektraKey *key);
const ElektraKey *keyCurrentMeta (const ElektraKey *key);

int keyCopyMeta (ElektraKey *dest, const ElektraKey *source, const char *metaName);
int keyCopyAllMeta (ElektraKey *dest, const ElektraKey *source);

const ElektraKey *keyGetMeta (const ElektraKey *key, const char* metaName);
ssize_t    keySetMeta (ElektraKey *key, const char* metaName,
	const char *newMetaString);
ElektraKeyset * keyMeta (ElektraKey * key);

/* Methods for Making Tests */
int keyCmp (const ElektraKey *k1, const ElektraKey *k2);

int keyNeedSync (const ElektraKey *key);

int keyIsBelow (const ElektraKey *key, const ElektraKey *check);
int keyIsBelowOrSame (const ElektraKey *key, const ElektraKey *check);
int keyIsDirectlyBelow (const ElektraKey *key, const ElektraKey *check);

int keyIsBinary (const ElektraKey *key);
int keyIsString (const ElektraKey *key);

/* Name Manipulation Methods */
const char *keyName (const ElektraKey *key);
ssize_t keyGetNameSize (const ElektraKey *key);
ssize_t keyGetName (const ElektraKey *key, char *returnedName, size_t maxSize);

ssize_t keySetName (ElektraKey *key, const char *newname);
ssize_t keyAddName (ElektraKey *key, const char *addName);

const void *keyUnescapedName (const ElektraKey *key);
ssize_t keyGetUnescapedNameSize (const ElektraKey *key);

const char *keyBaseName (const ElektraKey *key);
ssize_t keyGetBaseNameSize (const ElektraKey *key);
ssize_t keyGetBaseName (const ElektraKey *key, char *returned, size_t maxSize);

ssize_t keySetBaseName (ElektraKey *key,const char *baseName);
ssize_t keyAddBaseName (ElektraKey *key,const char *baseName);

elektraNamespace keyGetNamespace (ElektraKey const* key);
ssize_t keySetNamespace (ElektraKey * key, elektraNamespace ns);

/* Value Manipulation Methods */
const void *keyValue (const ElektraKey *key);
ssize_t keyGetValueSize (const ElektraKey *key);

const char *keyString (const ElektraKey *key);
ssize_t keyGetString (const ElektraKey *key, char *returnedString, size_t maxSize);
ssize_t keySetString (ElektraKey *key, const char *newString);

ssize_t keyGetBinary (const ElektraKey *key, void *returnedBinary, size_t maxSize);
ssize_t keySetBinary (ElektraKey *key, const void *newBinary, size_t dataSize);

int keyLock (ElektraKey * key, elektraLockFlags what);
int keyIsLocked (const ElektraKey * key, elektraLockFlags what);

static inline ElektraKey *keyDup (const ElektraKey *source, elektraCopyFlags flags)
{
	return keyCopy (keyNew ("/", KEY_END), source, flags);
}

/**************************************
 *
 * KeySet methods
 *
 **************************************/

ElektraKeyset *ksNew (size_t alloc, ...) ELEKTRA_SENTINEL;
ElektraKeyset *ksVNew (size_t alloc, va_list ap);

ElektraKeyset *ksDup (const ElektraKeyset * source);
int ksCopy (ElektraKeyset *dest, const ElektraKeyset *source);

uint16_t ksIncRef (ElektraKeyset * ks);
uint16_t ksDecRef (ElektraKeyset * ks);
uint16_t ksGetRef (const ElektraKeyset * ks);

int ksClear (ElektraKeyset *ks);
int ksDel (ElektraKeyset *ks);

ssize_t ksGetSize (const ElektraKeyset *ks);

ssize_t ksAppendKey (ElektraKeyset *ks, ElektraKey *toAppend);

ssize_t ksAppend (ElektraKeyset *ks, const ElektraKeyset *toAppend);
ElektraKeyset *ksCut (ElektraKeyset *ks, const ElektraKey *cutpoint);

ElektraKey *ksPop (ElektraKeyset *ks);

int ksRewind (ElektraKeyset *ks);
ElektraKey *ksNext (ElektraKeyset *ks);
ElektraKey *ksCurrent (const ElektraKeyset *ks);

ElektraKey *ksHead (const ElektraKeyset *ks);
ElektraKey *ksTail (const ElektraKeyset *ks);

elektraCursor ksGetCursor (const ElektraKeyset *ks);
int ksSetCursor (ElektraKeyset *ks, elektraCursor cursor);
ElektraKey *ksAtCursor (const ElektraKeyset *ks, elektraCursor cursor);

ElektraKey *ksLookup (ElektraKeyset *ks, ElektraKey *k, elektraLookupFlags options);
ElektraKey *ksLookupByName (ElektraKeyset *ks, const char *name, elektraLookupFlags options);

ssize_t ksSearch (const ElektraKeyset * ks, const ElektraKey * toAppend);

#ifdef __cplusplus
}
}
#endif

#endif /* KDB_H */
