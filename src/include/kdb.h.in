/**
 * @file
 *
 * @brief Exported methods of the Library
 *
 * The documentation is in source files, not in this header file.
 * Enum types and macros are documented in src/libs/elektra/kdbenum.c.
 *
 * For already rendered API documentation, see https://doc.libelektra.org/api/
 *
 * @copyright BSD License (see LICENSE.md or https://www.libelektra.org)
 */

// clang-format off

@DISCLAMER@

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the BSD License (revised).                      *
 *                                                                         *
 ***************************************************************************/

#ifndef KDB_H
#define KDB_H

#define ELEKTRA_SENTINEL // needed for SWIG
#define KDB_VERSION "@KDB_VERSION@"
#define KDB_VERSION_MAJOR @KDB_VERSION_MAJOR@
#define KDB_VERSION_MINOR @KDB_VERSION_MINOR@
#define KDB_VERSION_PATCH @KDB_VERSION_PATCH@
#define KDB_PATH_SEPARATOR '/'
#define KDB_PATH_ESCAPE '\\'
#cmakedefine ELEKTRA_ENABLE_OPTIMIZATIONS

#ifdef __cplusplus
extern "C" {
#endif

#include "kdbos.h"
#include <stdint.h>

#ifdef __cplusplus
}
#endif

enum {
	KEY_VALUE=1<<1,
	KEY_FLAGS=3,
	KEY_BINARY=1<<4,
	KEY_SIZE=1<<11,
	KEY_FUNC=1<<12,
	KEY_META=1<<15,
	KEY_NULL=1<<16,
	KEY_LOCK_NAME=1<<17,
	KEY_LOCK_VALUE=1<<18,
	KEY_LOCK_META=1<<19,
};

#ifdef __cplusplus
#define KEY_END (static_cast<void *> (0))
#else
#define KEY_END ((void *) 0)
#endif

typedef int elektraLockFlags;
typedef int elektraKeyFlags;

enum {
	KEY_CP_NAME   = 1<<0,
	KEY_CP_STRING = 1<<1,
	KEY_CP_VALUE  = 1<<2,
	KEY_CP_META   = 1<<3,
	KEY_CP_ALL    = KEY_CP_NAME | KEY_CP_VALUE | KEY_CP_META,
};
typedef unsigned int elektraCopyFlags;

enum {
	KEY_NS_NONE=0,
	KEY_NS_CASCADING=1,
	KEY_NS_META=2,
	KEY_NS_SPEC=3,
	KEY_NS_PROC=4,
	KEY_NS_DIR=5,
	KEY_NS_USER=6,
	KEY_NS_SYSTEM=7,
	KEY_NS_DEFAULT=8,
};
typedef int elektraNamespace;

static const elektraNamespace KEY_NS_FIRST = KEY_NS_META;
static const elektraNamespace KEY_NS_LAST = KEY_NS_DEFAULT;

typedef ssize_t elektraCursor;


#ifdef __cplusplus
namespace ckdb {
extern "C" {
#endif

typedef struct _KDB	KDB;
typedef struct _Key	ElektraKey;
typedef struct _KeySet	ElektraKeySet;


/**************************************
 *
 * KDB methods
 *
 **************************************/

KDB * elektraKdbOpen (const ElektraKeySet * contract, ElektraKey * parentKey);

int elektraKdbClose (KDB * handle, ElektraKey * errorKey);

int elektraKdbGet (KDB * handle, ElektraKeySet * ks, ElektraKey * parentKey);
int elektraKdbSet (KDB * handle, ElektraKeySet * ks, ElektraKey * parentKey);

/**************************************
 *
 * Key methods
 *
 **************************************/

/* Basic Methods */
ElektraKey * elektraKeyNew (const char * keyname, ...) ELEKTRA_SENTINEL;
ElektraKey * elektraKeyVNew (const char * keyname, va_list ap);

ElektraKey * elektraKeyCopy (ElektraKey * dest, const ElektraKey * source, elektraCopyFlags flags);

int elektraKeyClear (ElektraKey * key);
int elektraKeyDel (ElektraKey * key);

uint16_t elektraKeyIncRef (ElektraKey * key);
uint16_t elektraKeyDecRef (ElektraKey * key);
uint16_t elektraKeyGetRef (const ElektraKey * key);

/* Metadata */
ElektraKeySet * elektraKeyMeta (ElektraKey * key);
int elektraKeySetMeta (ElektraKey * key, ElektraKeySet * meta);

/* Relations */
int elektraKeyCompareName (const ElektraKey * k1, const ElektraKey * k2);

int elektraKeyIsBelow (const ElektraKey * key, const ElektraKey * check);
int elektraKeyIsBelowOrSame (const ElektraKey * key, const ElektraKey * check);
int elektraKeyIsDirectlyBelow (const ElektraKey * key, const ElektraKey * check);

/* Name Manipulation Methods */
const char * elektraKeyName (const ElektraKey * key);
ssize_t elektraKeyNameSize (const ElektraKey * key);

ssize_t elektraKeySetName (ElektraKey * key, const char * newname);
ssize_t elektraKeyAddName (ElektraKey * key, const char * addName);

const char * elektraKeyEscapedName (const ElektraKey * key);

const char * elektraKeyBaseName (const ElektraKey * key);
ssize_t elektraKeyBaseNameSize (const ElektraKey * key);

ssize_t elektraKeySetBaseName (ElektraKey * key, const char * baseName);
ssize_t elektraKeyAddBaseName (ElektraKey * key, const char * baseName);

elektraNamespace elektraKeyNamespace (ElektraKey const * key);
ssize_t elektraKeySetNamespace (ElektraKey * key, elektraNamespace ns);

/* Value Manipulation Methods */
const void * elektraKeyValue (const ElektraKey * key);
ssize_t elektraKeyValueSize (const ElektraKey * key);

ssize_t elektraKeySetValue (ElektraKey * key, const void * value, size_t valueSize);

/* Locking */
int elektraKeyLock (ElektraKey * key, elektraLockFlags what);
int elektraKeyIsLocked (const ElektraKey * key, elektraLockFlags what);

/* Aliases */
static inline ElektraKey * elektraKeyDup (const ElektraKey * source, elektraCopyFlags flags)
{
	return elektraKeyCopy (elektraKeyNew ("/", KEY_END), source, flags);
}

/**************************************
 *
 * KeySet methods
 *
 **************************************/

ElektraKeySet * elektraKeysetNew (size_t alloc, ...) ELEKTRA_SENTINEL;
ElektraKeySet * elektraKeysetVNew (size_t alloc, va_list ap);

ElektraKeySet * elektraKeysetDup (const ElektraKeySet * source);
int elektraKeysetCopy (ElektraKeySet * dest, const ElektraKeySet * source);

uint16_t elektraKeysetIncRef (ElektraKeySet * ks);
uint16_t elektraKeysetDecRef (ElektraKeySet * ks);
uint16_t elektraKeysetGetRef (const ElektraKeySet * ks);

int elektraKeysetClear (ElektraKeySet * ks);
int elektraKeysetDel (ElektraKeySet * ks);

ssize_t elektraKeysetSize (const ElektraKeySet * ks);

ssize_t elektraKeysetAdd (ElektraKeySet * ks, ElektraKey * k);
ElektraKey * elektraKeysetGet (ElektraKeySet * ks, elektraCursor cursor);
ElektraKey * elektraKeysetRemove (ElektraKeySet * ks, elektraCursor cursor);

ssize_t elektraKeysetAddAll (ElektraKeySet * ks, const ElektraKeySet * other);

ElektraKey * elektraKeysetLookup (ElektraKeySet * ks, const ElektraKey * k);
ElektraKey * elektraKeysetLookupByName (ElektraKeySet * ks, const char *name);

ssize_t elektraKeysetSearch (const ElektraKeySet * ks, const ElektraKey * k);

#ifdef __cplusplus
}
}
#endif

#endif /* KDB_H */
