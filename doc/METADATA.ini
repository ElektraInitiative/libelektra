#
# This document describes all meta data and specification values available.
#
# If your plugin/tool/API uses meta data, please add it here.
#

#
# meta-meta (description how to parse/use that file)
#
# [the name of the meta-key]
# type= (string|enumeration|regular expression) the type of the meta-value
# status= (implemented|idea) the current state of this meta data entry
# usedby/api= the API methods which use the meta-key (space separated)
# usedby/plugin= the plugins which use the meta-key (space separated)
# usedby/tool= the tools which use the meta-key (space separated)
# description= explains what it is about
# note= give additional notes for that meta-key
# example= give additional examples how the meta-key might look like
#
# To mount this file you can use:
#
#  kdb mount /path/to/doc/METADATA.ini system/metadata ni
#
# To get a meta value, use:
#
#  kdb getmeta system/metadata/ni version/major
#  kdb getmeta system/metadata/ni version/minor
#  kdb getmeta system/metadata/order type
#

[]
filename=METADATA.ini
version/major=0
version/minor=5


#
# Important meta-data often used in configuration files
# (and seldom in specifications)
#

[order]
type= int
status= implemented
usedby/plugin= hosts augeas keytometa
usedby/api= elektraKeyCmpOrder
description= relative order in the keyset if non-alphabetical order
 is needed. This meta data is only to preserve order as found in
 the file. It is an hint to allow complete reconstruction as it
 was before.
 Keys without order meta data or keys with same order, yield
 implementation-defined ordering.
 When some knowledge about desired ordering exists, e.g. when
 key sets are merged, the keys should to be reordered to avoid
 this.
note= this will rarely used within specifications, but is directly
  derived from configuration files.
  I.e. only storage plugins set and get this property.

[comment]
type= string
status= implemented
usedby/plugin= hosts (keytometa)
description= the users comment about the key (mostly its value)
  the first line is the comment after a key/value
  further lines are the lines before a key/value
note= this will rarely used within specifications, but rather directly
  in configuration files.




[line]
type= int
status= proposal
description= contains the line number from which a key was read.
note= is useful for validation problems when someone directly
  edits files



#
# Needed for specification of key access (ksLookup by spec)
#

[fallback/#]
type=key name
status=implemented
usedby/api= ksLookup
description=When a key was looked up unsuccessfully, keys in this
  array will be tried instead.

[override/#]
type=key name
usedby/api= ksLookup
status=implemented
description=Keys in this array will be preferred over the key
  itself

[namespace/#]
type=namespace
status=implemented
usedby/api= ksLookup
description=Typically all namespaces are cascaded one after the other
  in the build-in order.
  Using this metadata you can avoid that some namespaces are used or
  can change the order.

[default]
status=implemented
usedby/api= ksLookup
description=The default value will be used if no other value could
  be found successfully.




[context]
status=implemented
usedby/api=getenv
description=use /env/layer and internal information to facilitate
  a context-aware lookup


[callback/_]
status=reserved
usedby/tool=kdb
usedby/api=getenv
description=reserved meta information that will be preserved during the whole
  chain of ksLookup() callback calls


#
# For tagging binary keys
#

[binary]
type=empty
status=implemented
usedby/api= keyNew keyVNew keyIsBinary keyIsString keyValue keyGetValueSize keyString keyGetString keySetString keyGetBinary keySetBinary
usedby/plugin= xmltool yajl null
description= For this metadata only the presence is significant, not its value.
  It is used to tag binary keys. Binary keys are keys that either have no value (null keys, keyValue returns null).






#
# Needed for mounting by specification
#

[mountpoint]
type=string
status= proposed
usedby/tool= mount-spec
description=indicates that the key represents a mountpoint
  
  the value is the filename that should be used for the configuration file
  defined by the specification
example=default.ecf


[infos]
type= string
status= proposed
usedby/tool= mount-spec
description= infos about the mountpoint
  
  See CONTRACT.ini for individual infos (usedby is tagged with spec).
  
  hint of application developer that the key actually needs
  a specific plugin (that cannot be derived by other metadata)
  "needs" means that it is semantically absolutely necessary and
  required that such an plugin exists.
  
  Without the plugin the application might break.
  If the plugin is optional and only nice to have, use recommends
  instead.
note=  It is generally preferred that other metadata will be used to
  deduce the needs of the specification, e.g. use check/validation
  meta data instead of as given above.

[config]
type= string
status= proposed
description= indicate that the mountpoint needs some
  configuration for plugins in order to work.
  
  See CONTRACT.ini for details.





#
# Needed for specification of code generation
#

[opt]
status= implemented
usedby/tool= gen

[opt/long]
status= implemented
usedby/tool= gen

[env]
status= proposed



#
# Needed for documentation
#

[see/#]
status= implemented
usedby/tool= gen

[rationale]

[description]
description = this is information provided for the developer
  and *not* a comment from administrators

[example]
description = it is always good to have an example.
  The example is only for documentation unlike the default
  which will be used if nothing else is given.











#
# Implementations via plugins
#




#
# Information about the key's name
#

[rename/toupper]
type = string
status = implemented
usedby/plugin = rename
description = rename key name to uppercase

[rename/tolower]
type= string
status= implemented
usedby/plugin= rename
description=rename key name to lowercase

[rename/cut]
type= string
status= implemented
usedby/plugin= rename
description=cut out a common name

[rename/to]
type= string
status= implemented
usedby/plugin= rename
description=use a different name instead of the cut out name

[origname]
type= string
status= implemented
usedby/plugin= rename
description= stores the original name of the key as it was before the
  rename operation



#
# Spec Plugin
#

[conflict/_]
type = string
status = proposed
description = reports which meta data had a conflict because another
  meta data was already present before.
  Idea: use only one log, also for conflicts.

[array]
type = range
status = proposed
description = checks if the subkeys form a valid array and are not smaller/larger
  than as given.
example = 4-20

[required]
type = range
status= proposal
description = for _ as basename as array. Otherwise the presence determines
  if a key is required.

#
# Per-Key Log
#

[logs/_/_]
status = proposal
description = logs + pluginname + criticality


[warnings]
status = implemented

[error]
status = implemented


#
# Struct validation
#


[struct]
type = vector <string>
status = proposed
description = checks if the subkeys form a valid struct with the given
  names.
  The validator makes sure that there are no keys for the struct missing.
example = device mpoint type options [dumpfreq] [passno]


#
# Validation/Checks about the key's value
#


[check/type]
type= string
status= implemented
usedby/plugin= type
description= defines the type of the value, as specified in CORBA.
example = short unsigned_short long unsigned_long long_long
  unsigned_long_long float double long_double char boolean octet

[check/type/min]
type= int
status= implemented
usedby/plugin= type
description= defines the min value type of the integer value

[check/type/max]
type= int
status= implemented
usedby/plugin= type
description= defines the max value type of the integer value

[check/format]
type= string
status= idea
description= defines the format of the value

[check/path]
status= implemented
usedby/plugin= path
description= defines which file (path) the value referes to

[check/validation]
status= implemented
usedby/plugin= validation
type= regular expression
description= a regular expression to check against

[check/validation/message]
status= implemented
usedby/plugin= validation
description= the message added to the error if validation fails

[check/validation/match]
status= implemented
usedby/plugin= validation
description= if it should be matched against LINE or WORD

[check/validation/ignorecase]
status= implemented
usedby/plugin= validation
description= to ignore case when matching

[check/validation/invert]
status= implemented
usedby/plugin= validation
description= to invert match

[check/range]
status= idea
description= range checks, from-to, or arbitrary sets of numbers
see= check/type/min and check/type/max for already existing
  implementations

[check/enum]
status= implemented
usedby/plugin= enum
description= List of apostrophe enclosed values separated by
	commas to check against

[check/calculate]
status= implemented
usedby/plugin= calculate
type= string
description= A string starting with a logical comparator symbol
	followed by a Polish prefix notation to calculate a value
	to check against

[check/condition]
status= implemented
usedby/plugin= conditionals
type= string
description= A ternary conditional style operator to define 
	relations between keys

#
# Other information about keys
#

[deprecated]
status= idea
description= Flag keys that will be removed in further versions
note= thanks to Config::Model for that idea

[internal/<plugin>/*]
status= proposed
description= Internal meta data to be ignored by other plugins.
example=internal/ini/parent could be the name for internal parent
 information of the ini plugin.

[source]
status= idea
description= states where a key comes from if it is not from an ordinary
 persistent configuration. E.g. hardware (queries)
 e.g. system/sw/xorg/current/monitor might have "source" metadata if it
 is queried from hardware and not from configuration file.

[dependency/control]
status= idea
description= control keys which enable/disable parameters

[dependency/value]
status= idea
description= specific values of the dependency key have impact on that key

[application/name]
status= idea
description= links a key to a application, so that it can be easily purged
 when the application is no longer installed.
 Note that this is only needed together with another option below like version.
 Typically purged keys can be found easily when no schema for it exists anymore.

[application/version]
status= idea
description= links a key to a specific set of version(s). Can be used to control
 purging even more specific

[restrict/write]
status= idea
description= avoid writing on the value of the key, it still can be removed

[restrict/remove]
status= idea
description= avoid removal of key (needs schema-checker to read key)

[final]
status= idea
description= do not allow the key to be overwritten by a merger plugin

[evaluate/<language>]
type= program code
status= idea
description= evaluate expression to check if key should be included, program should
 abort or however evalute plugin is configured



#
# Old stuff inherited from filesys plugin
#

[uid]
status= currently obsolete
type= time
usedby/api= keyNew kdbextension.h
description= The owner of the key.

[gid]
status= currently obsolete
type= time
usedby/api= keyNew kdbextension.h
description= The group of the key.

[mode]
status= currently obsolete
type= int
usedby/api= keyNew kdbextension.h
description= The access mode of the key.

[atime]
type= time
status= currently obsolete
usedby/api= keyNew kdbextension.h
description= The time when the key was last accessed.

[mtime]
type= time
status= currently obsolete
usedby/api= keyNew kdbextension.h
description= The time when the value of a key were last modified.

[ctime]
type= time
status= currently obsolete
usedby/api= keyNew kdbextension.h
description= The time when the meta data of a key were last modified.






#
# Reserved names, not to be used by meta data
#

[spec]
description= to not avoid meta keys with standard spec keys, no meta key name must begin with spec

[proc]
description= to not avoid meta keys with standard proc keys, no meta key name must begin with proc

[dir]
description= to not avoid meta keys with standard dir keys, no meta key name must begin with dir

[user]
description= to not avoid meta keys with standard user keys, no meta key name must begin with user

[system]
description= to not avoid meta keys with standard system keys, no meta key name must begin with system




# The following proposal may supersede/complement the previous comment,
# because it allows:
# - to restore formatting, including:
#  - inline comments
#  - spaces before comments
#  - empty lines
# - to distinguish between different kinds of comments and empty lines
# - to tag every single comment line, which increases extensibility
#
# It needs, however, an API so that the user is not required to fiddle
# with all these details.

[comment/#]
status= implemented
usedby/plugin= hosts
type = string
description= comment line preceding an actual key
 Except #0, which is the inline key (in the same line).
 The comment numbering starts from top to bottom. The comment
 directly above the key is the last entry in the array and
 the topmost comment belonging to the key is #1.
 Comment keys that are not above any key (comments in the last
 lines of files) are added to the parentkey.
 Other libraries doing similar things:
 http://commons.apache.org/proper/commons-configuration/apidocs/org/apache/commons/configuration2/PropertiesConfigurationLayout.html
 http://code.google.com/p/bracket-properties/
 
[comment/#/start]
status= implemented
usedby/plugin= hosts
type= string
description= determines the character used to start this line of comment
 None if its an empty line

[comment/#/space]
status= implemented
usedby/plugin= hosts
type= string
description= the space used between a comment and the beginning of the
 line or after end of payload data (for inline comments)
 If no start token was found, only space and no comment is present.


#
# Plugin specific Metadata
#

[csv/order]
status= implemented
usedby/plugins= csvstorage
type= string
description= used to manage the column order.

[crypto/encrypt]
status= implemented
usedby/plugins= crypto
type= string
description= used to mark a key for encryption. The crypto plugin is supposed to encrypt the key. After the encryption the type of the key will be set to "binary". Its original type will be restored after decryption.

[crypto/salt]
status= implemented
usedby/plugins= crypto
type= string
description= used to store the salt thas is required for deriving the cryptographic key as well as the initialization vector (IV).

