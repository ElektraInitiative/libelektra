.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "ELEKTRA\-SPEC" "7" "June 2019" "" ""
.
.SH "NAME"
\fBelektra\-spec\fR \- spec namespace
.
.SH "INTRODUCTION"
spec is a special namespace that describes via metadata the semantics of individual keys\.
.
.P
Most importantly it:
.
.IP "1." 4
describes which keys are of interest to the application
.
.IP "2." 4
describes the metadata to be copied to every key
.
.IP "3." 4
describes how the cascading lookup works
.
.IP "4." 4
describes the mount points including the plugins needed for them
.
.IP "" 0
.
.P
It is, however, not limited to this but can express any other key database semantics (new plugins might be necessary, though)\.
.
.SH "Application"
The most simple use is to enlist all keys that will be used by an application and maybe give a description for them (we use ini syntax in this document):
.
.IP "" 4
.
.nf

[mykey]

[folder/anotherkey]
description = set this key if you want another behavior
.
.fi
.
.IP "" 0
.
.P
So Keys in \fBspec\fR allow us to specify which keys are read by the application\. The description key will be copied (referred to) to \fBfolder/anotherkey\fR of any namespace, so that it can easily be accessed\.
.
.SH "Cascading Lookup"
Other features are directly implemented in \fBksLookup\fR\. When cascading keys (those starting with \fB/\fR) are used following features are now available (in the metadata of respective \fBspec\fR\-keys):
.
.IP "\(bu" 4
\fBoverride/#\fR: use these keys \fIin favor\fR of the key itself (note that \fB#\fR is the syntax for arrays, e\.g\. \fB#0\fR for the first element, \fB#_10\fR for the 11th and so on)
.
.IP "\(bu" 4
\fBnamespace/#\fR: instead of using all namespaces in the predefined order, one can specify which namespaces should be searched in which order
.
.IP "\(bu" 4
\fBfallback/#\fR: when no key was found in any of the (specified) namespaces the \fBfallback\fR\-keys will be searched
.
.IP "\(bu" 4
\fBdefault\fR: this value will be used if nothing else was found
.
.IP "" 0
.
.P
E\.g\.
.
.IP "" 4
.
.nf

[promise]
default=20
fallback/#0=/somewhere/else
namespace/#0=user
.
.fi
.
.IP "" 0
.
.IP "1." 4
When this file is mounted to \fBspec/sw/app/#0\fR we specify, that for the key \fB/sw/app/#0/promise\fR only the namespace \fBuser\fR should be used\.
.
.IP "2." 4
If this key was not found, but \fB/somewhere/else\fR is present, we will use this key instead\. The \fBfallback\fR technique is very powerful: it allows us to have (recursive) links between applications\. In the example above, the application is tricked in receiving e\.g\. the key \fBuser/somewhere/else\fR when \fBpromise\fR was not available\.
.
.IP "3." 4
The value \fB20\fR will be used as default, even if no configuration file is found\.
.
.IP "" 0
.
.P
Note that the fallback, override and cascading works on \fIkey level\fR, and not like most other systems have implemented, on configuration \fIfile level\fR\.
.
.SH "Validation"
You can tag any key using the \fBcheck\fR metadata so that it will be validated\.
.
.P
For example:
.
.IP "" 4
.
.nf

[folder/anotherkey]
check/validation = abc\.*
check/validation/message = def does not start with abc
.
.fi
.
.IP "" 0
.
.SH "Mounting"
In the spec namespace you can also specify mount points\. First you need the metakey \fBmountpoint\fR and a configuration file name\. Otherwise, it basically works in the same way as the contracts in plugins using \fBinfos\fR and \fBconfig\fR:
.
.IP "" 4
.
.nf

[]
mountpoint=file\.abc
config/plugin/code/escape = 40
config/plugin/lua#abc/script = abc_storage\.lua
infos/author = Markus Raab
infos/needs = resolver_abc rename code lua#abc
infos/recommends = hexcode
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
.
.IP "\(bu" 4
see application integration tutorial (towards end) \fI/doc/tutorials/application\-integration\.md\fR
.
.IP "\(bu" 4
see namespaces tutorial \fI/doc/tutorials/namespaces\.md\fR
.
.IP "\(bu" 4
elektra\-namespaces(7) \fIelektra\-namespaces\.md\fR
.
.IP "\(bu" 4
elektra\-cascading(7) \fIelektra\-cascading\.md\fR
.
.IP "" 0

