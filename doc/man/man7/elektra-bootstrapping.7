.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "ELEKTRA\-BOOTSTRAPPING" "7" "June 2019" "" ""
.
.SH "NAME"
\fBelektra\-bootstrapping\fR \- default backend
.
.P
One important aspect of a configuration library is the out\-of\-the\-box experience\. How does the system work before anything is configured? The optimal situation is that everything fully works, and applications, that just want to load and store configuration, do not see any difference between out\-of\-the\-box behavior and a well\-configured, fine\-tuned system\.
.
.P
To support that experience, a so\-called \fBdefault backend\fR is responsible in the case that nothing was configured so far\. It must have a storage that is able to store full Elektra semantics\. To avoid reimplementation of storage plugins, for default storage plugins (\fBstorage\fR or in code \fBKDB_STORAGE\fR) is used\. A resolver plugin (\fBresolver\fR or in code \fBKDB_RESOLVER\fR) takes care of the inevitable portability issues\. The \fBdefault backend\fR stores configuration in \fBKDB_DB_FILE\fR\. One can easily avoid the usage of the default backend by simple mounting another backend to \fB/\fR\.
.
.P
The mounting configuration (the configuration how to mount the mount points) also needs to be stored somewhere\. The so called \fBinit backend\fR is responsible for fetching configuration from \fBsystem/elektra\fR, where the mount points are stored\. Again \fBKDB_STORAGE\fR and \fBKDB_RESOLVER\fR is used, but now they write into the configuration file \fBKDB_DB_INIT\fR (\fBelektra\.ecf\fR by default)\.
.
.P
Thus for full and static build variants an exchange at run\-time is not possible\. Using shared libraries, however, \fBKDB_STORAGE\fR and \fBKDB_RESOLVER\fR are actually symbolic links (\fBlibelektra\-resolver\.so\fR and \fBlibelektra\-storage\.so\fR) to concrete plugins and thus can be changed without recompilation\.
.
.P
The \fBinit backend\fR is guaranteed to stay mounted at \fBsystem/elektra\fR where the configuration for Elektra itself is stored\. After mounting all backends, Elektra checks if \fBsystem/elektra\fR still resides at the default backend\. If not, the init backend will be mounted there\.
.
.SH "SUMMARY"
To summarize, this approach delivers a good out\-of\-the\-box experience capable of storing configuration\. For special use cases, applications and administrators can mount specific backends anywhere except at, and below, \fBsystem/elektra\fR\. On \fBkdbOpen()\fR, the system bootstraps itself starting with the init backend\.
.
.P
The default backend consists of a default storage plugin and default resolver plugin\. The default resolver has no specific requirements, but the default storage plugin must be able to handle full Elektra semantics\. The backend is mounted to root (\fB/\fR), so any keys can be stored in it\. The implementation of the core guarantees that user and system keys always stay separated\.
.
.SH "TRACEABILITY"
.
.IP "\(bu" 4
\fBelektraOpenBootstrap()\fR implements above algorithm
.
.IP "\(bu" 4
\fBbackendOpenDefault()\fR opens the default backend
.
.IP "\(bu" 4
\fB/src/include/kdbconfig\.h\.in\fR contains above \fBKDB_*\fR variables
.
.IP "\(bu" 4
\fBsrc/plugins/CMakeLists\.txt\fR creates the symbolic links
.
.IP "\(bu" 4
\fBcmake/Modules/LibAddMacros\.cmake\fR \fBcreate_lib_symlink\fR function
.
.IP "" 0
.
.SH "SEE ALSO"
.
.IP "\(bu" 4
bootstrap decision \fI/doc/decisions/bootstrap\.md\fR
.
.IP "" 0

