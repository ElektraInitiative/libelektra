.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "ELEKTRA\-LIBS" "7" "October 2018" "" ""
.
.SH "NAME"
\fBelektra\-libs\fR \- libs overview
.
.SH "DESCRIPTION"
Since version \fB0\.8\.15 \fI/doc/decisions/library_split\.md\fR\fR \fBlibelektra \fIelektra/\fR\fR is split into following libraries:
.
.P
.
.SS "Loader"
\fBloader \fIloader/\fR\fR contains source files that implement the plugin loader functionality\. The files are linked to \fBlibelektra \fIelektra/\fR\fR\.
.
.SS "Libease"
.
.nf

libelektra\-ease\.so
.
.fi
.
.P
\fBlibease \fIease/\fR\fR contains data\-structure operations on top of libcore which do not depend on internals\. Applications and plugins can choose to not link against it if they want to stay minimal\. Its main goal is to make programming with Elektra easier if some extra kB are not an issue\.
.
.SS "Libplugin"
.
.nf

libelektra\-plugin\.so
.
.fi
.
.P
\fBlibplugin \fIplugin/\fR\fR contains \fBelektraPlugin*\fR symbols and plugins should link against it\.
.
.SS "Libpluginprocess"
.
.nf

libelektra\-pluginprocess\.so
.
.fi
.
.P
\fBlibpluginprocess \fIpluginprocess/\fR\fR contains functions aiding in executing plugins in a separate process and communicating with those child processes\. This child process is forked from Elektra\'s main process each time such plugin is used and gets closed again afterwards\. It uses a simple communication protocol based on a KeySet that gets serialized through a pipe via the dump plugin to orchestrate the processes\.
.
.P
This is useful for plugins which cause memory leaks to be isolated in an own process\. Furthermore this is useful for runtimes or libraries that cannot be reinitialized in the same process after they have been used\.
.
.SS "Libproposal"
.
.nf

libelektra\-proposal\.so
.
.fi
.
.P
\fBlibproposal \fIproposal/\fR\fR contains functions that are proposed for libcore\. Depends on internas of libcore and as such must always fit to the exact same version\.
.
.SS "Libmeta"
.
.nf

libelektra\-meta\.so
.
.fi
.
.P
\fBlibmeta \fImeta/meta\.c\fR\fR contains metadata operations as described in \fBMETADATA\.ini \fI/doc/METADATA\.ini\fR\fR\. Will be code\-generated in the future, so methods should be mechanical reflections of the contents in \fBMETADATA\.ini \fI/doc/METADATA\.ini\fR\fR\.
.
.SS "Libcore"
.
.nf

libelektra\-core\.so
<kdbhelper\.h>
<kdb\.h> (key* and ks*)
.
.fi
.
.P
Contains the fundamental data\-structures every participant of Elektra needs to link against\. It should be the only part that access the internal data structures\.
.
.SS "Libtools"
\fBlibtools \fItools/\fR\fR is a high\-level C++ shared\-code for tools\. It includes:
.
.IP "\(bu" 4
plugin interface
.
.IP "\(bu" 4
backend interface
.
.IP "\(bu" 4
3\-way merge
.
.IP "" 0
.
.SS "Utility"
\fBlibutility \fIutility/\fR\fR provides utility functions to be used in plugins\.
.
.SS "Libinvoke"
.
.nf

libelektra\-invoke\.so
.
.fi
.
.P
\fBlibinvoke \fIinvoke/\fR\fR provides a simple API allowing us to call functions exported by plugins\.
.
.SS "IO"
.
.nf

libelektra\-io\.so
.
.fi
.
.P
\fBio \fIio/\fR\fR provides the common API \fIhttps://doc\.libelektra\.org/api/current/html/group__kdbio\.html\fR for using asynchronous I/O bindings\.
.
.SS "Notification"
.
.nf

libelektra\-notification\.so
.
.fi
.
.P
\fBnotification \fInotification/\fR\fR provides the notification API \fIhttps://doc\.libelektra\.org/api/current/html/group__kdbnotification\.html\fR\. Usage examples:
.
.IP "\(bu" 4
Basic notifications using polling \fIhttps://www\.libelektra\.org/examples/notificationpolling\fR
.
.IP "\(bu" 4
Using asynchronous I/O bindings \fIhttps://www\.libelektra\.org/examples/notificationasync\fR
.
.IP "\(bu" 4
Reload KDB when Elektra\'s configuration has changed \fIhttps://www\.libelektra\.org/examples/notificationreload\fR
.
.IP "" 0

