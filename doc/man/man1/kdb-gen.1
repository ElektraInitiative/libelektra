.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "KDB\-GEN" "1" "May 2019" "" ""
.
.SH "NAME"
\fBkdb\-gen\fR \- code generation
.
.P
This tutorial serves as a guide for how you can use the code generator and contextual values\. For more background read this paper \fIhttp://www\.markus\-raab\.org/ftp/papers/cop2014program\.pdf\fR\.
.
.SH "Motivation"
Writing your own conversion of the strings parsed from commandline arguments and configuration files to native variables is error\-prone and time consuming to code, e\.g\.:
.
.IP "" 4
.
.nf

k = ksLookupByName(ks, "user/app/current/number");
int i = 20;
if (k) i = atoi(keyString(k));
.
.fi
.
.IP "" 0
.
.P
We see already multiple problems with this code:
.
.IP "\(bu" 4
Name of key encoded in program (could be wrong/undocumented)
.
.IP "\(bu" 4
Default value (20) is encoded in application (could be undocumented)
.
.IP "\(bu" 4
No error handling for null/binary keys
.
.IP "\(bu" 4
No error handling when string is not an integer
.
.IP "" 0
.
.P
Our approach avoids all such errors and saves time for more important implementation tasks\.
.
.SH "Specification"
To avoid the problems we initially stated, we use a specification \fItests/lift\.ini\fR\. Using the specification, we can generate code similar to the code above, but without any of the errors\. To generate the code we use:
.
.IP "" 4
.
.nf

kdb gen specification\.ini template_context\.hpp \-o lift_context\.hpp
.
.fi
.
.IP "" 0
.
.P
Using the generated code is very easy, we just create a parameter object:
.
.IP "" 4
.
.nf

kdb::KeySet ks;
kdb::Context c;
kdb::Parameters par(ks,c);
.
.fi
.
.IP "" 0
.
.P
and access the keys as if they were variables:
.
.IP "" 4
.
.nf

std::cout << "delay: " << par\.test\.lift\.emergency\.delay << std::endl;
.
.fi
.
.IP "" 0
.
.P
For a full example, see here \fItests/lift\.cpp\fR, or here for a thread\-safe version \fItests/lift_context\.cpp\fR\.
.
.SH "Contextual Values"
The value of a key often depends on a context\. E\.g\. if an application is started with another profile:
.
.IP "" 4
.
.nf

firefox \-P anonymous
.
.fi
.
.IP "" 0
.
.P
we want different configuration values, e\.g\. the value of the key \fB/username\fR should certainly not give hints of the user\. In Elektra such problems are solved by introduction of an additional level in the hierarchy\. So instead of:
.
.IP "" 4
.
.nf

user/firefox/username = Max Mustermann
.
.fi
.
.IP "" 0
.
.P
We can have multiple values for the same key:
.
.IP "" 4
.
.nf

user/firefox/default/username = Max Mustermann
user/firefox/anonymous/username = Anonymous User
.
.fi
.
.IP "" 0
.
.P
To define such a contextual value, we change the specification to contain placeholders, e\.g\.:
.
.IP "" 4
.
.nf

[/firefox/%profile%/username]
type=string
default=none
.
.fi
.
.IP "" 0
.
.P
Note that the current implementation always requires a default value to be present which will be used when no configuration could be loaded\.
.
.P
The placeholder %profile% will be replaced by the current profile\. Now we need a so\-called layer to actually switch the profile:
.
.IP "" 4
.
.nf

class ProfileLayer : public kdb::Layer
{
public:
    ProfileLayer(std::string const & profile) :
        m_profile(profile) {};
    std::string id() const { return "profile"; }
    std::string operator()() const { return m_profile; }
private:
    std::string m_profile;
};
.
.fi
.
.IP "" 0
.
.P
The id() has to match the placeholder we saw before\. Whatever operator() yields will be used instead of this placeholder\. Now we have everything ready to actually switch profiles:
.
.IP "" 4
.
.nf

par\.activate<ProfileLayer>("anonymous");
.
.fi
.
.IP "" 0
.
.P
The library function \fBactivate\fR makes sure that all contextual values that contain the placeholder %profile% will use "anonymous" instead of the placeholder afterwards\. If no placeholder exists \fB%\fR will be used\.
.
.SH "Command\-line Options"
Now if we want to implement the \-P commandline option, we can do so very easily using Elektraâ€™s code generator\. We simply add another item in the specification:
.
.IP "" 4
.
.nf

[/firefox/profile]
type=string
opt=P
opt/long=profile
default=none
.
.fi
.
.IP "" 0
.
.P
The specification entries "opt" and "opt/long" will generate, next to the contextual value \fBfirefox\.profile\fR additional code parsing can be done via the commandline:
.
.IP "" 4
.
.nf

kdb gen specification\.ini template_genopt\.c \-o genopt\.c
.
.fi
.
.IP "" 0
.
.P
To parse all arguments as defined in the specification, we simply use the generated function:
.
.IP "" 4
.
.nf

kdb::ksGetOpt(argc, argv, ks);
.
.fi
.
.IP "" 0
.
.P
Then we can implement firefox\-like profiles as shown here \fItests/visit_context\.cpp\fR by activating what we got from commandline:
.
.IP "" 4
.
.nf

par\.activate<ProfileLayer>(par\.profile);
.
.fi
.
.IP "" 0
.
.SH "Limitations"
This is an experimental prototype\. You should have a look at the test cases to see what is actually working\.
.
.P
The code generator has little (none) checks for valid specifications\. For problems in the specification you usually get hard\-to\-interpret compile errors\.
.
.P
Not all of Elektra\'s types are supported, for example, char and octet do not work\.
.
.P
Please open an issue if you plan to use the code\.
.
.SH "See Also"
If you want to know more read:
.
.IP "\(bu" 4
introduction paper \fIhttp://www\.markus\-raab\.org/ftp/papers/cop2014program\.pdf\fR\.
.
.IP "\(bu" 4
multi\-threaded extension \fIhttp://www\.markus\-raab\.org/ftp/papers/seus2015global\.pdf\fR
.
.IP "\(bu" 4
multi\-process extension \fIhttp://www\.markus\-raab\.org/ftp/papers/mobile2016persistent\.pdf\fR
.
.IP "" 0

