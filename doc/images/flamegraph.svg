<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>elektraKeySetName (223,276,101 samples, 1.27%)</title><rect x="874.7" y="69" width="15.0" height="15.0" fill="rgb(246,184,34)" rx="2" ry="2" />
<text  x="877.67" y="79.5" ></text>
</g>
<g >
<title>keyAddName (65,483,849 samples, 0.37%)</title><rect x="884.4" y="53" width="4.4" height="15.0" fill="rgb(224,205,13)" rx="2" ry="2" />
<text  x="887.37" y="63.5" ></text>
</g>
<g >
<title>ksDel (11,657,581 samples, 0.07%)</title><rect x="1187.8" y="165" width="0.8" height="15.0" fill="rgb(218,140,45)" rx="2" ry="2" />
<text  x="1190.80" y="175.5" ></text>
</g>
<g >
<title>keyIncRef (9,585,534 samples, 0.05%)</title><rect x="851.5" y="101" width="0.7" height="15.0" fill="rgb(252,225,43)" rx="2" ry="2" />
<text  x="854.51" y="111.5" ></text>
</g>
<g >
<title>Lexer::countPlainNonSpace(unsigned long) const (343,267,492 samples, 1.95%)</title><rect x="1123.1" y="101" width="23.0" height="15.0" fill="rgb(251,131,20)" rx="2" ry="2" />
<text  x="1126.08" y="111.5" >L..</text>
</g>
<g >
<title>std::deque&lt;kdb::Key, std::allocator&lt;kdb::Key&gt; &gt;::pop_back() (5,167,444 samples, 0.03%)</title><rect x="1182.3" y="133" width="0.4" height="15.0" fill="rgb(220,112,26)" rx="2" ry="2" />
<text  x="1185.32" y="143.5" ></text>
</g>
<g >
<title>Lexer::addBlockEnd(unsigned long) (15,911,112 samples, 0.09%)</title><rect x="1039.8" y="101" width="1.1" height="15.0" fill="rgb(241,30,17)" rx="2" ry="2" />
<text  x="1042.84" y="111.5" ></text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (773,150,055 samples, 4.40%)</title><rect x="837.7" y="117" width="52.0" height="15.0" fill="rgb(242,222,21)" rx="2" ry="2" />
<text  x="840.72" y="127.5" >kdb::..</text>
</g>
<g >
<title>yambi::Parser::parse() (7,865,885,788 samples, 44.80%)</title><rect x="658.8" y="149" width="528.6" height="15.0" fill="rgb(209,20,30)" rx="2" ry="2" />
<text  x="661.76" y="159.5" >yambi::Parser::parse()</text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;, char, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char const*, char const*, char const*&amp;, char32_t*, char32_t*, char32_t*&amp;) const&gt;(char const*, char const*, std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char const*, char const*, char const*&amp;, char32_t*, char32_t*, char32_t*&amp;) const) (6,755,935 samples, 0.04%)</title><rect x="658.3" y="101" width="0.5" height="15.0" fill="rgb(213,121,3)" rx="2" ry="2" />
<text  x="661.30" y="111.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (3,394,009 samples, 0.02%)</title><rect x="1172.2" y="69" width="0.3" height="15.0" fill="rgb(234,73,26)" rx="2" ry="2" />
<text  x="1175.24" y="79.5" ></text>
</g>
<g >
<title>Lexer::addSimpleKeyCandidate() (3,986,235 samples, 0.02%)</title><rect x="1122.8" y="101" width="0.3" height="15.0" fill="rgb(219,130,43)" rx="2" ry="2" />
<text  x="1125.81" y="111.5" ></text>
</g>
<g >
<title>keySetOwner (13,044,700 samples, 0.07%)</title><rect x="888.8" y="53" width="0.9" height="15.0" fill="rgb(223,219,18)" rx="2" ry="2" />
<text  x="891.80" y="63.5" ></text>
</g>
<g >
<title>Lexer::Lexer(std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;) (32,696,267 samples, 0.19%)</title><rect x="656.6" y="149" width="2.2" height="15.0" fill="rgb(238,93,13)" rx="2" ry="2" />
<text  x="659.57" y="159.5" ></text>
</g>
<g >
<title>Lexer::scanToNextToken() (186,930,188 samples, 1.06%)</title><rect x="1040.9" y="101" width="12.6" height="15.0" fill="rgb(215,15,39)" rx="2" ry="2" />
<text  x="1043.91" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (21,377,757 samples, 0.12%)</title><rect x="1180.8" y="85" width="1.5" height="15.0" fill="rgb(223,228,40)" rx="2" ry="2" />
<text  x="1183.83" y="95.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (3,648,282 samples, 0.02%)</title><rect x="1079.0" y="69" width="0.2" height="15.0" fill="rgb(209,66,29)" rx="2" ry="2" />
<text  x="1081.96" y="79.5" ></text>
</g>
<g >
<title>Input::index() const (7,219,805 samples, 0.04%)</title><rect x="1172.5" y="101" width="0.5" height="15.0" fill="rgb(251,227,27)" rx="2" ry="2" />
<text  x="1175.47" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (4,594,425 samples, 0.03%)</title><rect x="1122.5" y="85" width="0.3" height="15.0" fill="rgb(236,165,35)" rx="2" ry="2" />
<text  x="1125.49" y="95.5" ></text>
</g>
<g >
<title>yambi::Parser::yypush_(char const*, int, yambi::Parser::symbol_type&amp;&amp;) (64,008,341 samples, 0.36%)</title><rect x="1183.1" y="133" width="4.3" height="15.0" fill="rgb(220,124,45)" rx="2" ry="2" />
<text  x="1186.08" y="143.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (8,398,071 samples, 0.05%)</title><rect x="1121.6" y="101" width="0.5" height="15.0" fill="rgb(210,187,43)" rx="2" ry="2" />
<text  x="1124.59" y="111.5" ></text>
</g>
<g >
<title>Lexer::scanDoubleQuotedScalar() (390,281,371 samples, 2.22%)</title><rect x="1053.5" y="117" width="26.2" height="15.0" fill="rgb(252,64,3)" rx="2" ry="2" />
<text  x="1056.47" y="127.5" >L..</text>
</g>
<g >
<title>keyNew (1,789,339 samples, 0.01%)</title><rect x="1188.6" y="197" width="0.1" height="15.0" fill="rgb(230,138,53)" rx="2" ry="2" />
<text  x="1191.59" y="207.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (11,398,761 samples, 0.06%)</title><rect x="1078.4" y="101" width="0.8" height="15.0" fill="rgb(218,161,39)" rx="2" ry="2" />
<text  x="1081.44" y="111.5" ></text>
</g>
<g >
<title>yambi::Parser::stack&lt;yambi::Parser::stack_symbol_type, std::vector&lt;yambi::Parser::stack_symbol_type, std::allocator&lt;yambi::Parser::stack_symbol_type&gt; &gt; &gt;::push(yambi::Parser::stack_symbol_type&amp;&amp;) (20,731,205 samples, 0.12%)</title><rect x="1186.0" y="101" width="1.4" height="15.0" fill="rgb(238,113,53)" rx="2" ry="2" />
<text  x="1188.98" y="111.5" ></text>
</g>
<g >
<title>keyAddBaseName (29,837,058 samples, 0.17%)</title><rect x="889.7" y="117" width="2.0" height="15.0" fill="rgb(225,50,0)" rx="2" ry="2" />
<text  x="892.68" y="127.5" ></text>
</g>
<g >
<title>ksAppend (6,336,506 samples, 0.04%)</title><rect x="1187.4" y="165" width="0.4" height="15.0" fill="rgb(245,74,30)" rx="2" ry="2" />
<text  x="1190.38" y="175.5" ></text>
</g>
<g >
<title>Input::consume() (2,144,880 samples, 0.01%)</title><rect x="1171.6" y="101" width="0.2" height="15.0" fill="rgb(248,123,17)" rx="2" ry="2" />
<text  x="1174.63" y="111.5" ></text>
</g>
<g >
<title>thread_2793 (17,558,678,809 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(242,181,18)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >thread_2793</text>
</g>
<g >
<title>ksClose (5,826,927 samples, 0.03%)</title><rect x="1188.2" y="149" width="0.4" height="15.0" fill="rgb(226,81,29)" rx="2" ry="2" />
<text  x="1191.20" y="159.5" ></text>
</g>
<g >
<title>elektraYambiGet (15,122,722,819 samples, 86.13%)</title><rect x="172.3" y="197" width="1016.3" height="15.0" fill="rgb(215,224,19)" rx="2" ry="2" />
<text  x="175.29" y="207.5" >elektraYambiGet</text>
</g>
<g >
<title>Lexer::scanValue() (138,861,944 samples, 0.79%)</title><rect x="1173.0" y="117" width="9.3" height="15.0" fill="rgb(234,74,29)" rx="2" ry="2" />
<text  x="1175.96" y="127.5" ></text>
</g>
<g >
<title>yambi::Parser::stack&lt;yambi::Parser::stack_symbol_type, std::vector&lt;yambi::Parser::stack_symbol_type, std::allocator&lt;yambi::Parser::stack_symbol_type&gt; &gt; &gt;::push(yambi::Parser::stack_symbol_type&amp;&amp;) (6,077,383 samples, 0.03%)</title><rect x="1182.7" y="133" width="0.4" height="15.0" fill="rgb(246,13,13)" rx="2" ry="2" />
<text  x="1185.67" y="143.5" ></text>
</g>
<g >
<title>Driver::parse(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (10,283,541,979 samples, 58.57%)</title><rect x="496.3" y="165" width="691.1" height="15.0" fill="rgb(235,44,34)" rx="2" ry="2" />
<text  x="499.29" y="175.5" >Driver::parse(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; c..</text>
</g>
<g >
<title>Driver::getKeySet() const (13,715,008 samples, 0.08%)</title><rect x="495.4" y="165" width="0.9" height="15.0" fill="rgb(213,198,52)" rx="2" ry="2" />
<text  x="498.37" y="175.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (10,453,212 samples, 0.06%)</title><rect x="1171.8" y="101" width="0.7" height="15.0" fill="rgb(209,164,35)" rx="2" ry="2" />
<text  x="1174.77" y="111.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (32,683,376 samples, 0.19%)</title><rect x="1180.1" y="101" width="2.2" height="15.0" fill="rgb(230,67,18)" rx="2" ry="2" />
<text  x="1183.07" y="111.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (7,349,339 samples, 0.04%)</title><rect x="1077.8" y="101" width="0.5" height="15.0" fill="rgb(230,70,14)" rx="2" ry="2" />
<text  x="1080.82" y="111.5" ></text>
</g>
<g >
<title>yambi::Parser::yypush_(char const*, yambi::Parser::stack_symbol_type&amp;&amp;) (42,076,370 samples, 0.24%)</title><rect x="1184.5" y="117" width="2.9" height="15.0" fill="rgb(216,164,34)" rx="2" ry="2" />
<text  x="1187.55" y="127.5" ></text>
</g>
<g >
<title>ksAppendKey (28,297,940 samples, 0.16%)</title><rect x="895.7" y="117" width="1.9" height="15.0" fill="rgb(206,187,27)" rx="2" ry="2" />
<text  x="898.66" y="127.5" ></text>
</g>
<g >
<title>Driver::exitValue(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (130,152,425 samples, 0.74%)</title><rect x="891.7" y="133" width="8.8" height="15.0" fill="rgb(228,58,12)" rx="2" ry="2" />
<text  x="894.71" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (6,756,749 samples, 0.04%)</title><rect x="1172.0" y="85" width="0.5" height="15.0" fill="rgb(216,28,4)" rx="2" ry="2" />
<text  x="1175.02" y="95.5" ></text>
</g>
<g >
<title>keySetMeta (5,693,552 samples, 0.03%)</title><rect x="900.1" y="85" width="0.3" height="15.0" fill="rgb(235,77,8)" rx="2" ry="2" />
<text  x="903.07" y="95.5" ></text>
</g>
<g >
<title>Input::consume() (1,861,117 samples, 0.01%)</title><rect x="1078.3" y="101" width="0.1" height="15.0" fill="rgb(216,12,3)" rx="2" ry="2" />
<text  x="1081.31" y="111.5" ></text>
</g>
<g >
<title>elektraStrLen (2,819,155 samples, 0.02%)</title><rect x="900.3" y="69" width="0.1" height="15.0" fill="rgb(226,7,38)" rx="2" ry="2" />
<text  x="903.26" y="79.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (3,349,415 samples, 0.02%)</title><rect x="1053.2" y="85" width="0.2" height="15.0" fill="rgb(233,198,35)" rx="2" ry="2" />
<text  x="1056.20" y="95.5" ></text>
</g>
<g >
<title>Lexer::scanSingleQuotedScalar() (399,007,204 samples, 2.27%)</title><rect x="1146.1" y="117" width="26.9" height="15.0" fill="rgb(231,126,1)" rx="2" ry="2" />
<text  x="1149.14" y="127.5" >L..</text>
</g>
<g >
<title>keyVNew (558,307,671 samples, 3.18%)</title><rect x="852.2" y="101" width="37.5" height="15.0" fill="rgb(247,50,52)" rx="2" ry="2" />
<text  x="855.16" y="111.5" >key..</text>
</g>
<g >
<title>Driver::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,094,032,725 samples, 6.23%)</title><rect x="818.2" y="133" width="73.5" height="15.0" fill="rgb(205,24,37)" rx="2" ry="2" />
<text  x="821.18" y="143.5" >Driver::..</text>
</g>
<g >
<title>keySetString (21,378,561 samples, 0.12%)</title><rect x="899.0" y="101" width="1.5" height="15.0" fill="rgb(248,172,14)" rx="2" ry="2" />
<text  x="902.02" y="111.5" ></text>
</g>
<g >
<title>ksClose (9,699,916 samples, 0.06%)</title><rect x="1189.3" y="181" width="0.7" height="15.0" fill="rgb(246,66,2)" rx="2" ry="2" />
<text  x="1192.34" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::from_bytes(char const*, char const*) (13,506,120 samples, 0.08%)</title><rect x="657.8" y="117" width="1.0" height="15.0" fill="rgb(245,61,22)" rx="2" ry="2" />
<text  x="660.85" y="127.5" ></text>
</g>
<g >
<title>Lexer::nextToken() (4,194,220,608 samples, 23.89%)</title><rect x="900.5" y="133" width="281.8" height="15.0" fill="rgb(237,61,41)" rx="2" ry="2" />
<text  x="903.46" y="143.5" >Lexer::nextToken()</text>
</g>
<g >
<title>Input::index() const (7,307,637 samples, 0.04%)</title><rect x="1079.2" y="101" width="0.5" height="15.0" fill="rgb(216,125,45)" rx="2" ry="2" />
<text  x="1082.21" y="111.5" ></text>
</g>
<g >
<title>addToKeySet(kdb::KeySet&amp;, kdb::Key&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (12,718,987,000 samples, 72.44%)</title><rect x="333.8" y="181" width="854.8" height="15.0" fill="rgb(240,109,21)" rx="2" ry="2" />
<text  x="336.83" y="191.5" >addToKeySet(kdb::KeySet&amp;, kdb::Key&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; c..</text>
</g>
<g >
<title>keyVInit (376,735,101 samples, 2.15%)</title><rect x="864.4" y="85" width="25.3" height="15.0" fill="rgb(208,94,0)" rx="2" ry="2" />
<text  x="867.36" y="95.5" >k..</text>
</g>
<g >
<title>elektraMalloc (13,236,237 samples, 0.08%)</title><rect x="890.8" y="101" width="0.8" height="15.0" fill="rgb(240,4,18)" rx="2" ry="2" />
<text  x="893.75" y="111.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (8,326,603 samples, 0.05%)</title><rect x="1179.5" y="101" width="0.6" height="15.0" fill="rgb(214,77,8)" rx="2" ry="2" />
<text  x="1182.50" y="111.5" ></text>
</g>
<g >
<title>void kdb::Key::set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (43,018,499 samples, 0.24%)</title><rect x="897.6" y="117" width="2.9" height="15.0" fill="rgb(229,132,47)" rx="2" ry="2" />
<text  x="900.56" y="127.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (4,832,932 samples, 0.03%)</title><rect x="1171.3" y="101" width="0.3" height="15.0" fill="rgb(218,165,28)" rx="2" ry="2" />
<text  x="1174.30" y="111.5" ></text>
</g>
<g >
<title>ksDup (6,993,488 samples, 0.04%)</title><rect x="495.8" y="149" width="0.5" height="15.0" fill="rgb(214,100,1)" rx="2" ry="2" />
<text  x="498.82" y="159.5" ></text>
</g>
<g >
<title>all (17,558,678,809 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(228,14,43)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (2,281,228 samples, 0.01%)</title><rect x="1122.6" y="69" width="0.2" height="15.0" fill="rgb(225,146,24)" rx="2" ry="2" />
<text  x="1125.64" y="79.5" ></text>
</g>
<g >
<title>Input::consume() (2,143,566 samples, 0.01%)</title><rect x="1122.1" y="101" width="0.2" height="15.0" fill="rgb(211,49,34)" rx="2" ry="2" />
<text  x="1125.15" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (7,314,538 samples, 0.04%)</title><rect x="1078.7" y="85" width="0.5" height="15.0" fill="rgb(215,161,51)" rx="2" ry="2" />
<text  x="1081.71" y="95.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (7,552,155 samples, 0.04%)</title><rect x="1122.3" y="101" width="0.5" height="15.0" fill="rgb(219,66,53)" rx="2" ry="2" />
<text  x="1125.29" y="111.5" ></text>
</g>
<g >
<title>ksDel (19,143,353 samples, 0.11%)</title><rect x="1188.7" y="197" width="1.3" height="15.0" fill="rgb(207,49,51)" rx="2" ry="2" />
<text  x="1191.71" y="207.5" ></text>
</g>
<g >
<title>Input::Input(std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;) (22,999,057 samples, 0.13%)</title><rect x="657.2" y="133" width="1.6" height="15.0" fill="rgb(251,5,1)" rx="2" ry="2" />
<text  x="660.21" y="143.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (7,536,340 samples, 0.04%)</title><rect x="1145.6" y="85" width="0.5" height="15.0" fill="rgb(222,227,0)" rx="2" ry="2" />
<text  x="1148.64" y="95.5" ></text>
</g>
<g >
<title>main (17,558,595,698 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(231,195,44)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >main</text>
</g>
<g >
<title>keySetMeta (6,512,750 samples, 0.04%)</title><rect x="889.2" y="37" width="0.5" height="15.0" fill="rgb(208,167,46)" rx="2" ry="2" />
<text  x="892.24" y="47.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (10,637,682 samples, 0.06%)</title><rect x="1181.5" y="69" width="0.8" height="15.0" fill="rgb(221,81,25)" rx="2" ry="2" />
<text  x="1184.55" y="79.5" ></text>
</g>
<g >
<title>keyDel (2,308,007 samples, 0.01%)</title><rect x="1182.5" y="117" width="0.2" height="15.0" fill="rgb(218,175,35)" rx="2" ry="2" />
<text  x="1185.51" y="127.5" ></text>
</g>
<g >
<title>Lexer::fetchTokens() (494,829,416 samples, 2.82%)</title><rect x="1020.2" y="117" width="33.3" height="15.0" fill="rgb(241,200,38)" rx="2" ry="2" />
<text  x="1023.22" y="127.5" >Le..</text>
</g>
<g >
<title>Lexer::scanPlainScalar() (988,710,061 samples, 5.63%)</title><rect x="1079.7" y="117" width="66.4" height="15.0" fill="rgb(252,186,1)" rx="2" ry="2" />
<text  x="1082.70" y="127.5" >Lexer::..</text>
</g>
</g>
</svg>
