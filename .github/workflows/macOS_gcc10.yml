name: macOS GCC

# Triggers the workflow on push or pull request events
on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  # Unfortunately the tests for the Xerces plugin fail: https://travis-ci.org/ElektraInitiative/libelektra/jobs/483331657#L3740
  # The curlget tests fail: https://github.com/ElektraInitiative/libelektra/issues/3382
  PLUGINS: 'ALL;-xerces;-curlget'
  BINDINGS: 'ALL;-rust'
  # Skip homebrew cleanup to avoid issues with removal of packages
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  CC: gcc-10
  CXX: g++-10

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7 # Not needed with a .ruby-version file

    - name: Install Dependencies
      run: |
        brew update
        brew config
        brew install augeas \
          bison \
          dbus \
          discount \
          flex \
          gpgme \
          libev \
          libgcrypt \
          libgit2 \
          libuv \
          lua \
          ninja \
          qt \
          swig \
          yajl \
          zeromq
        brew install --cask adoptopenjdk

    - name: Setup Build Environment
      run: |
        gem install test-unit --no-document
        pip2 install cheetah # Required by kdb-gen
        brew tap homebrew/services
        brew update # Work around for [Homebrew Services issue 206](https://github.com/Homebrew/homebrew-services/issues/206)
        brew postinstall dbus
        brew services restart dbus
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        SYSTEM_DIR="$PWD/kdbsystem"
        CMAKE_OPT+=(
          -GNinja
          -DPLUGINS="${PLUGINS:-ALL}"
          -DBINDINGS="${BINDINGS:-ALL}"
          -DTOOLS="${TOOLS:-ALL}"
          -DBUILD_FULL="${BUILD_FULL:-OFF}"
          -DBUILD_SHARED="${BUILD_SHARED:-ON}"
          -DENABLE_ASAN="${ENABLE_ASAN:-OFF}"
          -DCOMMON_FLAGS="${COMMON_FLAGS--Werror}"
          -DENABLE_DEBUG=ON
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DKDB_DB_SYSTEM="$SYSTEM_DIR"
          -DKDB_DEFAULT_STORAGE="${KDB_DEFAULT_STORAGE:-dump}"
          -DKDB_DB_FILE="${KDB_DB_FILE:-default.ecf}"
          -DKDB_DB_INIT="${KDB_DB_INIT:-elektra.ecf}"
        )
        printf '—— CMake Config ——\n'
        for option in "${CMAKE_OPT[@]}"; do printf '%s\n' "$option"; done
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${CMAKE_OPT[@]}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: output="$(cmake --build . --target install 2>&1)" || printf '%s' "$output"

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        cmake --build . --target run_all
        kdb run_all
