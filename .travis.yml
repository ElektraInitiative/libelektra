language: cpp
dist: bionic
osx_image: xcode10.2

#
# Define the build matrix
#
matrix:
  include:

    # ASAN: Enable AddressSanitizer

    - os: linux
      name: 🐧 GCC ASAN
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - ENABLE_ASAN=ON
        - CC_COMPILER=gcc-8
        - CXX_COMPILER=g++-8
        # Build less stuff so the build does not hit the timeout limit that often
        - TOOLS=kdb
        - BINDINGS=cpp
        - "PLUGINS='\
          ALL;\
          -augeas;\
          -base64;\
          -blockresolver;\
          -boolean;\
          -c;\
          -cachefilter;\
          -ccode;\
          -conditionals;\
          -constants;\
          -counter;\
          -cpptemplate;\
          -crypto_botan;\
          -crypto_gcrypt;\
          -crypto_openssl;\
          -csvstorage;\
          -curlget;\
          -date;\
          -dbus;\
          -dbusrecv;\
          -desktop;\
          -dini;\
          -directoryvalue;\
          -doc;\
          -dpkg;\
          -enum;\
          -error;\
          -fcrypt;\
          -file;\
          -filecheck;\
          -gitresolver;\
          -glob;\
          -gpgme;\
          -hexcode;\
          -hexnumber;\
          -hidden;\
          -hosts;\
          -iconv;\
          -ini;\
          -internalnotification;\
          -ipaddr;\
          -iterate;\
          -keytometa;\
          -line;\
          -lineendings;\
          -logchange;\
          -mathcheck;\
          -mini;\
          -mmapstorage;\
          -mmapstorage_crc;\
          -mozprefs;\
          -multifile;\
          -network;\
          -ni;\
          -null;\
          -passwd;\
          -path;\
          -process;\
          -profile;\
          -range;\
          -regexstore;\
          -rename;\
          -required;\
          -shell;\
          -simplespeclang;\
          -struct;\
          -syslog;\
          -tcl;\
          -template;\
          -timeofday;\
          -tracer;\
          -type;\
          -uname;\
          -validation;\
          -wresolver;\
          -xmltool;\
          -yajl;\
          -yambi;\
          -yamlcpp;\
          -yamlsmith;\
          -yanlr;\
          -zeromqrecv;\
          -zeromqsend;\
          '"
      script:
        - ninja
        - ninja run_nocheckshell

    - os: linux
      name: 🐧 Clang ASAN
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-7
            - ubuntu-toolchain-r-test
          packages:
            - clang-7
      env:
        - ENABLE_ASAN=ON
        - CC_COMPILER=clang-7
        - CXX_COMPILER=clang++-7
      script:
        - ninja
        - ninja run_all

    # FULL: Build full version of Elektra (BUILD_FULL=ON)

    - os: linux
      name: 🐧 FULL
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - BUILD_FULL=ON
        - BUILD_SHARED=OFF
        - CC_COMPILER=gcc-8
        - CXX_COMPILER=g++-8
      script:
        - ninja
        - output="$(ninja install 2>&1)" || printf '%s' "$output"
        - ninja run_all
        - kdb-full run_all

    - os: osx
      name: 🍏 GCC
      compiler: gcc
      addons:
        homebrew:
          packages:
            - augeas
            - bison
            - dbus
            - discount
            - gpgme
            - libev
            - libgcrypt
            - libgit2
            - libuv
            - lua
            - ninja
            - openssl
            - qt
            - swig
            - yajl
            - zeromq
      env:
        # Unfortunately the tests for the Xerces plugin fail: https://travis-ci.org/ElektraInitiative/libelektra/jobs/483331657#L3740
        - PLUGINS='ALL;-xerces'

    - os: linux
      name: 🐧 GCC
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - CC_COMPILER=gcc-8
        - CXX_COMPILER=g++-8

    - os: linux
      name: 🐧 Clang
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
          packages:
            - clang-7
            - clang-format-7
      env:
        - CC_COMPILER=clang-7
        - CXX_COMPILER=clang++-7

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      rvm install 2.5.1
      rvm use 2.5.1
      gem install test-unit --no-document
      if [[ "$CC" == "gcc" ]]; then
        brew upgrade gcc@9
        export CC=gcc-9
        export CXX=g++-9
      fi
      pip2 install cheetah # Required by kdb-gen
      # start D-Bus session bus
      brew services start dbus
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      [[ -n "$CC_COMPILER" ]] && export CC="$CC_COMPILER"
      [[ -n "$CXX_COMPILER" ]] && export CXX="$CXX_COMPILER"
      sudo apt-get -qq update
      sudo apt-get install ninja-build
      sudo apt-get install devscripts # contains `checkbashisms`
      sudo apt-get install libboost-all-dev
      sudo apt-get install libyaml-cpp-dev
      sudo apt-get install libuv-dev
      sudo apt-get install libdbus-1-dev
      sudo apt-get install libev-dev
      sudo apt-get install libzmq3-dev
      sudo apt-get install libxerces-c-dev
      sudo apt-get install moreutils # contains `sponge` required by `reformat-cmake`
      sudo pip install cmake-format[yaml]==0.6
    fi

#
# Source is checked out in $TRAVIS_BUILD_DIR
# Build directory will be "$TRAVIS_BUILD_DIR/build"
#
before_script:
  - |
    cd $TRAVIS_BUILD_DIR
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      CMAKE_OPT+=(-DCMAKE_INSTALL_PREFIX="$PWD/install")
      export PATH=$PATH:"$PWD/install/bin"
      export LD_LIBRARY_PATH="$PWD/install/lib"
    fi
    SYSTEM_DIR="$PWD/kdbsystem"
    mkdir build && cd build
    CMAKE_OPT+=(
      -GNinja
      -DPLUGINS="${PLUGINS:-ALL}"
      -DBINDINGS="${BINDINGS:-ALL}"
      -DTOOLS="${TOOLS:-ALL}"
      -DBUILD_FULL="${BUILD_FULL:-OFF}"
      -DBUILD_SHARED="${BUILD_SHARED:-ON}"
      -DENABLE_ASAN="${ENABLE_ASAN:-OFF}"
      -DCOMMON_FLAGS="${COMMON_FLAGS--Werror}"
      -DENABLE_DEBUG=ON
      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      -DKDB_DB_SYSTEM="$SYSTEM_DIR"
      -DKDB_DEFAULT_STORAGE="${KDB_DEFAULT_STORAGE:-dump}"
      -DKDB_DB_FILE="${KDB_DB_FILE:-default.ecf}"
      -DKDB_DB_INIT="${KDB_DB_INIT:-elektra.ecf}"
      $TRAVIS_BUILD_DIR
    )
  - |
    printf '—— CMake Config ——\n'
    for option in "${CMAKE_OPT[@]}"; do printf '%s\n' "$option"; done
  - cmake ${CMAKE_OPT[@]}

script:
  - ninja
  - output="$(ninja install 2>&1)" || printf '%s' "$output"
  - ninja run_all
  - kdb run_all
