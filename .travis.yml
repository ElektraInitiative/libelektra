language: cpp
dist: xenial
osx_image: xcode10.2

cache:
  directories:
    - $HOME/.m2
    - $HOME/.cabal
    - $HOME/elektra-cabal-sandbox
    - $HOME/Library/Caches/Homebrew

# don't cache our own libraries generated in the build
# so they always get rebuilt properly and to avoid init issues
# we ignore the result as some or all might not exist on build
# errors, in that case unregister would fail
before_cache:
  - rm -rf $HOME/.cabal/logs
  - cd $HOME/elektra-cabal-sandbox
  - cabal sandbox hc-pkg unregister spectranslator > /dev/null; true
  - cabal sandbox hc-pkg unregister specelektra > /dev/null; true
  - cabal sandbox hc-pkg unregister libfa > /dev/null; true
  - cabal sandbox hc-pkg unregister libelektra-haskell > /dev/null; true
  - rm -rf .cabal-sandbox/logs
  - rm -f .cabal-sandbox/world
  - rm -f .cabal-sandbox/add-source-timestamps

#
# Define the build matrix
#
matrix:
  include:

    # ASAN: Enable AddressSanitizer

    - os: linux
      name: 🐧 GCC ASAN
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - ENABLE_ASAN=ON
        - CC_COMPILER=gcc-8
        - CXX_COMPILER=g++-8
        # Build less stuff so the build does not hit the timeout limit that often
        - TOOLS=kdb
        - BINDINGS=cpp
        - "PLUGINS='\
          ALL;\
          -augeas;\
          -base64;\
          -blockresolver;\
          -boolean;\
          -c;\
          -cachefilter;\
          -camel;\
          -ccode;\
          -conditionals;\
          -constants;\
          -counter;\
          -cpptemplate;\
          -crypto_botan;\
          -crypto_gcrypt;\
          -crypto_openssl;\
          -csvstorage;\
          -curlget;\
          -date;\
          -dbus;\
          -dbusrecv;\
          -desktop;\
          -dini;\
          -directoryvalue;\
          -doc;\
          -dpkg;\
          -enum;\
          -error;\
          -fcrypt;\
          -file;\
          -filecheck;\
          -gitresolver;\
          -glob;\
          -gpgme;\
          -hexcode;\
          -hexnumber;\
          -hidden;\
          -hosts;\
          -iconv;\
          -ini;\
          -internalnotification;\
          -ipaddr;\
          -iterate;\
          -keytometa;\
          -line;\
          -lineendings;\
          -logchange;\
          -mathcheck;\
          -mini;\
          -mmapstorage;\
          -mmapstorage_crc;\
          -mozprefs;\
          -multifile;\
          -network;\
          -ni;\
          -noresolver;\
          -null;\
          -passwd;\
          -path;\
          -process;\
          -profile;\
          -range;\
          -regexstore;\
          -rename;\
          -required;\
          -shell;\
          -simplespeclang;\
          -struct;\
          -syslog;\
          -tcl;\
          -template;\
          -timeofday;\
          -tracer;\
          -type;\
          -uname;\
          -validation;\
          -wresolver;\
          -xmltool;\
          -yajl;\
          -yambi;\
          -yamlcpp;\
          -yamlsmith;\
          -yanlr;\
          -zeromqrecv;\
          -zeromqsend;\
          '"
      script:
        - ninja
        - ninja run_nocheckshell

    - os: linux
      # The DBus library on Ubuntu Xenial Xerus seems to leak memory
      # See: https://travis-ci.org/sanssecours/elektra/jobs/457428713
      dist: trusty
      name: 🐧 Clang ASAN
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-7
            - ubuntu-toolchain-r-test
          packages:
            - clang-7
      env:
        - ENABLE_ASAN=ON
        - CC_COMPILER=clang-7
        - CXX_COMPILER=clang++-7
      script:
        - ninja
        - ninja run_all

    # FULL: Build full version of Elektra (BUILD_FULL=ON)

    - os: linux
      name: 🐧 FULL
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - BUILD_FULL=ON
        - BUILD_SHARED=OFF
        - CC_COMPILER=gcc-8
        - CXX_COMPILER=g++-8
      script:
        - ninja
        - output="$(ninja install 2>&1)" || printf '%s' "$output"
        - ninja run_all
        - kdb-full run_all

    - os: osx
      name: 🍏 GCC
      compiler: gcc
      env:
        # Unfortunately the tests for the Xerces plugin fail: https://travis-ci.org/ElektraInitiative/libelektra/jobs/483331657#L3740
        - PLUGINS='ALL;-xerces'

    - os: linux
      name: 🐧 GCC
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - CC_COMPILER=gcc-8
        - CXX_COMPILER=g++-8

    - os: linux
      name: 🐧 Clang
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
          packages:
            - clang-7
            - clang-format-7
      env:
        - CC_COMPILER=clang-7
        - CXX_COMPILER=clang++-7

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      brew install ninja
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" && "$HASKELL" != "ON" ]]; then
      rvm install 2.5.1
      rvm use 2.5.1
      gem install test-unit --no-document
      if [[ "$CC" == "gcc" ]]; then
        brew install gcc
        brew link --overwrite gcc
        gcc_version_major=$(brew info gcc | head -n1 | sed -E 's/[^0-9]*([0-9]+)\..*/\1/')
        export CC="gcc-$gcc_version_major"
        export CXX="g++-$gcc_version_major"
      else
        # Use latest version of LLVM to translate the code
        brew install llvm
        export CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++
        # Linking Botan, ANTLR’s C++ runtime, and yaml-cpp using `gcc` fails on macOS
        brew install antlr
        brew install antlr4-cpp-runtime
        brew install botan
        brew install yaml-cpp
        # Unfortunately Xerces 3.2 causes multiple problems if we translate Elektra with GCC on macOS
        brew install xerces-c
        # OCLint complains about unknown compiler warning options, if we use GCC as compiler.
        brew cask install oclint
      fi
      brew install bison
      brew install dbus
      brew install discount
      brew install gpgme
      brew install libgcrypt
      brew install libgit2
      brew install libuv
      brew install libev
      brew install lua
      brew install openssl
      brew install pegtl
      brew install python@2; brew link --overwrite python@2
      brew install python || brew upgrade python
      brew install qt
      brew install swig
      brew install yajl
      brew install zeromq
      pip2 install cheetah # Required by kdb-gen
      # start D-Bus session bus
      brew services start dbus
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" && "$HASKELL" == "ON" ]] ; then
      brew install augeas
      # 8.4 is currently not supported by hint which we use
      brew install ghc@8.2
      brew link ghc@8.2 --force
      brew install cabal-install
      cabal update
      # avoid reinstalls if we already have them cached
      PATH=$PATH:"$HOME/.cabal/bin"
      which happy || cabal install happy
      which alex || cabal install alex
      which c2hs || cabal install c2hs
      export HASKELL_SHARED_SANDBOX=$HOME/elektra-cabal-sandbox
      mkdir -p $HASKELL_SHARED_SANDBOX
      cd $HASKELL_SHARED_SANDBOX
      cabal sandbox init
      # there is some strange cache bug where it complains that one of our own library's
      # directory doesn't exist though it gets properly unregistered. Apparently ignoring
      # that works anyway.
      cabal install --avoid-reinstalls \
        'base >=4.9 && <4.12' \
        'binary >=0.8 && <0.9' \
        'containers >=0.5 && <0.6' \
        'directory >=1.2 && <1.4' \
        'exceptions -any' \
        'haskell-src-exts-any' \
        'hint >=0.7.0 && <0.8.0' \
        'hspec -any' \
        'megaparsec -any' \
        'pretty -any' \
        'process >=1.4 && <1.7' \
        'QuickCheck-any' \
        'simple-logger -any' \
        'temporary -any' \
        'text -any' \
        || true
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      [[ -n "$CC_COMPILER" ]] && export CC="$CC_COMPILER"
      [[ -n "$CXX_COMPILER" ]] && export CXX="$CXX_COMPILER"
      sudo apt-get -qq update
      sudo apt-get install ninja-build
      sudo apt-get install devscripts # contains `checkbashisms`
      sudo apt-get install libboost-all-dev
      sudo apt-get install libyaml-cpp-dev
      sudo apt-get install libuv-dev
      sudo apt-get install libdbus-1-dev
      sudo apt-get install libev-dev
      sudo apt-get install libzmq3-dev
      sudo apt-get install libxerces-c-dev
      sudo apt-get install moreutils # contains `sponge` required by `reformat-cmake`
      sudo pip install cmake-format[yaml]==0.4.5
      git clone --branch 2.7.1 --depth 1 https://github.com/taocpp/PEGTL.git && sudo cp -R PEGTL/include/tao /usr/local/include
      mkdir -p "$HOME/bin" && cd "$HOME/bin" && \
        curl -L "https://github.com/mvdan/sh/releases/download/v2.6.3/shfmt_v2.6.3_linux_amd64" -o shfmt && \
        chmod u+x shfmt && export PATH=$PATH:"$HOME/bin"
    fi

#
# Source is checked out in $TRAVIS_BUILD_DIR
# Build directory will be TRAVIS_BUILD_DIR/../build
#
before_script:
  - |
    cd $TRAVIS_BUILD_DIR
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      CMAKE_OPT+=(-DCMAKE_INSTALL_PREFIX="$PWD/install")
      export PATH=$PATH:"$PWD/install/bin"
    fi
    SYSTEM_DIR="$PWD/kdbsystem"
    mkdir build && cd build
    CMAKE_OPT+=(
      -GNinja
      -DPLUGINS="${PLUGINS:-ALL}"
      -DBINDINGS="${BINDINGS:-ALL}"
      -DTOOLS="${TOOLS:-ALL}"
      -DBUILD_FULL="${BUILD_FULL:-OFF}"
      -DBUILD_SHARED="${BUILD_SHARED:-ON}"
      -DENABLE_ASAN="${ENABLE_ASAN:-OFF}"
      -DCOMMON_FLAGS="${COMMON_FLAGS--Werror}"
      -DENABLE_DEBUG=ON
      -DINSTALL_SYSTEM_FILES=OFF
      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      -DKDB_DB_SYSTEM="$SYSTEM_DIR"
      -DKDB_DEFAULT_STORAGE="${KDB_DEFAULT_STORAGE:-dump}"
      -DKDB_DB_FILE="${KDB_DB_FILE:-default.ecf}"
      -DKDB_DB_INIT="${KDB_DB_INIT:-elektra.ecf}"
      $TRAVIS_BUILD_DIR
    )
  - |
    printf '—— CMake Config ——\n'
    for option in "${CMAKE_OPT[@]}"; do printf '%s\n' "$option"; done
  - cmake ${CMAKE_OPT[@]}

script:
  - ninja
  - output="$(ninja install 2>&1)" || printf '%s' "$output"
  - ninja run_all
  - kdb run_all
