#!/usr/bin/env bash
#
# @author René Schwaiger <sanssecours@me.com>
# @brief Benchmark the runtime of different YAML plugins
# @date 12.04.2019
# @tags benchmark

BUILD_DIRECTORY="@CMAKE_BINARY_DIR@"
SOURCE_DIRECTORY="@CMAKE_SOURCE_DIR@"
PLUGINS=(yamlcpp yanlr yambi yawn yaypeg)
DATA_DIRECTORY="benchmarks/data"
BENCHMARK_TOOL="$BUILD_DIRECTORY/bin/benchmark_plugingetset"
INPUT_FILES=(
	keyframes.yaml
	combined.yaml
	generated.yaml
)
INPUT_URL="https://raw.githubusercontent.com/sanssecours/rawdata/master/YAML"

trap cleanup EXIT INT QUIT TERM

cleanup() {
	rm -rf "$DATA_DIRECTORY"
}

write() {
	PLUGIN="$1"
	INPUT="$2"
	OUTPUT="$3"
	KDBPATH='user/tests/yaml'
	kdb mount config.yaml "$KDBPATH" "$PLUGIN"
	cat "$INPUT_FILE" > "$(kdb file "$KDBPATH")"
	kdb export "$KDBPATH" yamlsmith > "$OUTPUT"
	kdb rm -r "$KDBPATH"
	kdb umount "$KDBPATH"
}

download() {
	mkdir -p "$DATA_DIRECTORY" || {
		printf >&2 'Unable to create download directory “%s”\n' "$DATA_DIRECTORY"
		exit 1
	}
	for INPUT_FILE in "${INPUT_FILES[@]}"; do
		OUTPUT=$(curl 2>&1 -L "$INPUT_URL/$INPUT_FILE" -o "$DATA_DIRECTORY/$INPUT_FILE")
		if [ $? != 0 ]; then
			printf >&2 'Unable to download “%s” as “%s”\n:' "$INPUT_URL/$INPUT_FILE" "$DATA_DIRECTORY/$INPUT_FILE"
			printf >&2 '%s\n' "$OUTPUT"
			exit 1
		fi
	done
}

cd "$SOURCE_DIRECTORY" || {
	printf >&2 'Unable to change working directory to “%s”\n' "$SOURCE_DIRECTORY"
	exit 1
}

command -v curl > /dev/null 2>&1 || {
	printf >&2 'This script requires the command `curl`\n'
	exit 1
}

command -v hyperfine > /dev/null 2>&1 || {
	printf >&2 'This script requires the command `hyperfine`\n'
	exit 1
}

download

for FILEPATH in "${INPUT_FILES[@]}"; do
	REFERENCE=reference.yaml
	INPUT_FILE="$DATA_DIRECTORY/$FILEPATH"
	write yamlcpp "$INPUT_FILE" "$REFERENCE"
	for PLUGIN in "${PLUGINS[@]}"; do
		write "$PLUGIN" "$INPUT_FILE" "$PLUGIN.yaml"
		diff -q "$REFERENCE" "$PLUGIN.yaml" || {
			printf >&2 'Plugin %s produced unexpected output for the file %s\n' "$PLUGIN" "$INPUT_FILE"
			diff >&2 -y "$REFERENCE" "$PLUGIN.yaml"
			exit 1
		}
		rm "$PLUGIN.yaml"
	done
	rm "$REFERENCE"
done

for FILEPATH in "${INPUT_FILES[@]}"; do
	DIRECTORY="$DATA_DIRECTORY/$(printf '%s' "$FILEPATH" | cut -f1 -d'.')"
	mkdir "$DIRECTORY"
	for PLUGIN in "${PLUGINS[@]}"; do
		cp "$DATA_DIRECTORY/$FILEPATH" "$DIRECTORY/test.$PLUGIN.in"
	done
done

for DIRECTORY in $(find $DATA_DIRECTORY -mindepth 1 -maxdepth 1 -type d); do
	hyperfine --warmup 3 \
		"\"$BENCHMARK_TOOL\" \"$DIRECTORY\" user ${PLUGINS[0]} get" \
		"\"$BENCHMARK_TOOL\" \"$DIRECTORY\" user ${PLUGINS[1]} get" \
		"\"$BENCHMARK_TOOL\" \"$DIRECTORY\" user ${PLUGINS[2]} get" \
		"\"$BENCHMARK_TOOL\" \"$DIRECTORY\" user ${PLUGINS[3]} get" \
		"\"$BENCHMARK_TOOL\" \"$DIRECTORY\" user ${PLUGINS[4]} get" |
		sed -e "s~$BUILD_DIRECTORY/bin/~~g" -e "s~$DATA_DIRECTORY/bin/~~g"
done
