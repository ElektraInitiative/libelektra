#!/bin/sh
#
# @author e1528532 <e1528532@libelektra.org>
# @brief run randoop on the jna bindings
# @date 29.10.2017
# @tags test java jna

#
# Executes the test generation tool randoop (https://randoop.github.io/randoop/)
# against the jna bindings with a standard configuration.
#
# Needs java to be accessible in the environment.
# Furthermore it expects the complete randoop bundle including its dependencies,
# which is called randoop-all-<version>.jar . It can be obtained from the randoop
# website mentioned above.
# By default it expects randoop-all-3.1.5.jar to be located in this directory.
# The jna bindings are expected to be in /usr/share/java on linux and 
# /usr/local/share/java on macOS.
#
# You can pass a custom location for the two files by calling this script like:
#
# ./randoop [path to randoop jar] [path to libelektra4j jar]
# e.g.
# ./randoop /Users/admin/Downloads/randoop-3.1.5/randoop-all-3.1.5.jar \
# /usr/local/share/java/libelektra4j-0.8.19.jar
#
# In case you have the required files in the standard paths, simply call ./randoop
#

RANDOOP="${1:-randoop-all-3.1.5.jar}"

stringContain() { [ -z "${2##*$1*}" ] && ([ -z "$1" ] || [ -n "$2" ]); }
if stringContain "Darwin" "$(uname)"; then
	BINDINGS="${2:-/usr/local/share/java/libelektra4j-@KDB_VERSION@.jar}"
else
	BINDINGS="${2:-/usr/share/java/libelektra4j-@KDB_VERSION@.jar}"
fi
CLASSPATH="${BINDINGS}:${RANDOOP}"

# The non-public members are not intended for users of the bindings. Those are
# native function calls to the elektra library and calling them randomly like
# randoop would do may result in jvm segmentation faults.
java -ea -classpath ${CLASSPATH} randoop.main.Main gentests \
--classlist=randoopClasses.txt --timelimit=120 --only-test-public-members=true
